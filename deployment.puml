@startuml "System Architecture"

actor Client

node DNS

DNS <- Client: DNS lookup
DNS ..> Client: IP address (<b>34.90.28.85</b>)

frame Infrastructure <<hivetown VPC>> as Infra {

    frame "Service Discovery" <<servicediscovery-eu-west4 10.0.4.0/22>> as SD #line:green {
        node "Zookeeper" <<ens4 10.0.4.2 static>> as Zookeeper {
        }
    }

    frame "Load Balancing" <<loadbalancers-eu-west4 10.0.0.0/22>> as LB {
        
        interface "Floating IP" as LBFloatingIP
        Client --> LBFloatingIP : http(s)

        node "Active LB" <<ens4 10.0.0.2 static>> as ActiveLB {
            component HAProxy as ALBHAProxy
            component Keepalived as ALBKeepalived
            ALBHAProxy -[hidden] ALBKeepalived
        }
        LBFloatingIP -> ALBHAProxy

        node "Passive LB" <<ens4 10.0.0.3 static>> as PassiveLB {
            component HAProxy as PLBHAProxy
            component Keepalived as PLBKeepalived
            PLBKeepalived -[hidden] PLBHAProxy

            ALBKeepalived -> PLBKeepalived : VRRP
            PLBKeepalived -> ALBKeepalived : VRRP
        }
        LBFloatingIP ...> PLBHAProxy
        ActiveLB -[hidden] PassiveLB

        Zookeeper -[#green] PassiveLB
        Zookeeper -[#green] ActiveLB

        interface "Internal" as LBInternal

        ALBHAProxy --> LBInternal : http(s)
        PLBHAProxy ..> LBInternal : http(s)

        note bottom of PassiveLB
            <b>Active-Passive</b>
            ---
            PassiveLB will take over if ActiveLB fails
            healthcheck by keepalived through VRRP

            On takeover, PassiveLB will become ActiveLB,
            and point the floating IP to itself.

            When ActiveLB comes back online, it will
            overtake PassiveLB and become the active node
        end note
    }

    LB -[hidden]- SD

    frame "Web Servers" <<webservers-eu-west4 10.0.192.0/18>> as WS {
        node "Web Server 1" <<ens4 dynamic>> as WS1 {
            component "Frontend" as WS1Frontend
            component "REST API" as WS1RestAPI
        }
        node "Web Server 2..n" <<ens4 dynamic>> as WSN {
            component "Frontend" as WS2Frontend
            component "REST API" as WS2RestAPI
        }

        interface "Database" as WSDatabase
        WS1RestAPI --> WSDatabase : http(s)
        WS2RestAPI --> WSDatabase: http(s)

        interface "External Services" as WSExternal
        WS1 --> WSExternal : http(s)
        WSN --> WSExternal : http(s)

        WSDatabase -[hidden] WSExternal

        WS1 -[#green]- Zookeeper
        WSN -[#green]- Zookeeper
    }

    LBInternal --> WS1 : http(s)
    LBInternal --> WSN : http(s)

    frame "Database" <<database-eu-west4 10.0.128.0/18>> as DB {
        node ActiveDB <<ens4 10.0.128.2 static>> as DBActive {
            component mysqld as DBActiveMysqld
        }

        node PassiveDB <<ens4 10.0.128.3 static>> as DBPassive {
            component mysqld as DBPassiveMysqld
        }

        DBActiveMysqld -> DBPassiveMysqld : Replication

        note as DBNote
            <b>Active-Passive</b>
            --
            Replicated through
            Master-Slave MySQL Replication

            --

            Behaves like the load balancer takeover,
            but when a new active is elected, it will
            stay the active until it fails, no matter
            if the original active comes back online.
            
        end note

        DBActiveMysqld .. DBNote
        DBPassiveMysqld .. DBNote
    }

    frame "Database Backups" <<database-backups-us-east1 10.0.112.0/20x>> as DBBackup {
        node "Backup 1" <<ens4 10.0.112.2 static>> as DBBackup1 {
            component mysqldump as DBBackupMysqldump
            component cron as DBBackupCron
        }

        DBBackupMysqldump -[hidden] DBBackupCron
        DBPassiveMysqld <-- DBBackupMysqldump : Backup
    }

    WSDatabase <--> DBActiveMysqld
    WSDatabase <.. DBPassiveMysqld
}

frame External {
    interface Inbound as EXInbound
    node FirebaseAuth
    node StaticContent
    node Stripe

    FirebaseAuth -[hidden]- StaticContent
    StaticContent -[hidden]- Stripe

    EXInbound -> FirebaseAuth : http(s)
    EXInbound -> StaticContent : http(s)
    EXInbound -> Stripe : http(s)
}

WSExternal -> EXInbound : http(s)
Client -> EXInbound : http(s)

@enduml