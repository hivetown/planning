@startuml "System Architecture"

actor Client

node DNS

DNS <- Client : DNS lookup
DNS .> Client : IP address

frame Infrastructure {

    frame "Load Balancing" as LB {
        interface "Floating IP" as LBFloatingIP
        Client --> LBFloatingIP : http(s)

        node "Active LB" as ActiveLB {
            component HAProxy as ALBHAProxy
            component Keepalived as ALBKeepalived
            ALBHAProxy -[hidden] ALBKeepalived
        }
        LBFloatingIP -> ALBHAProxy

        node "Passive LB" as PassiveLB {
            component HAProxy as PLBHAProxy
            component Keepalived as PLBKeepalived
            PLBKeepalived -[hidden] PLBHAProxy

            ALBKeepalived -> PLBKeepalived : VRRP
            PLBKeepalived -> ALBKeepalived : VRRP
        }
        LBFloatingIP ...> PLBHAProxy
        ActiveLB -[hidden] PassiveLB


        interface "Internal" as LBInternal

        ALBHAProxy --> LBInternal : http(s)
        PLBHAProxy ..> LBInternal : http(s)

        note bottom of PassiveLB
            <b>Active-Passive</b>
            ---
            PassiveLB will take over if ActiveLB fails
            healthcheck by keepalived through VRRP

            On takeover, PassiveLB will become ActiveLB,
            exchanging the floating IP address
            ___
            Having more than one Passive LB makes
            the system more resilient. TODO?
        end note
    }

    ' frame "Service Discovery" as SD {
    '     node "Leader" as SDLeader {
    '     }

    '     node "Follower 1" as SDFollower1 {
    '     }

    '     node "Follower 2" as SDFollower2 {
    '     }

    '     SDFollower1 -> SDLeader : Replication
    '     SDFollower1 <. SDLeader : TCP/8300
    '     SDLeader <- SDFollower2 : Replication
    '     SDLeader .> SDFollower2 : TCP/8300
    ' }

    ' LB -[hidden]- SD

    frame "Web Servers" as WS {
        node "Web Server 1" as WS1 {
            component "Frontend" as WS1Frontend
            component "REST API" as WS1RestAPI
        }
        node "Web Server 2" as WS2 {
            component "Frontend" as WS2Frontend
            component "REST API" as WS2RestAPI
        }

        interface "Database" as WSDatabase
        WS1RestAPI --> WSDatabase : http(s)
        WS2RestAPI --> WSDatabase: http(s)

        interface "External Services" as WSExternal
        WS1 --> WSExternal : http(s)
        WS2 --> WSExternal : http(s)

        WSDatabase -[hidden] WSExternal

        note as WSNote
            <b>Web Servers</b>
            ---
            More servers can be added
            to increase the capacity
        end note

        WS1 -[hidden] WSNote
        WS2 -[hidden] WSNote
    }

    LBInternal --> WS1 : http(s)
    LBInternal --> WS2 : http(s)

    frame "Database" as DB {
        node PassiveDB as DBPassive {
            component mysqld as DBPassiveMysqld
        }
        node ActiveDB as DBActive {
            component mysqld as DBActiveMysqld
        }

        DBPassiveMysqld <- DBActiveMysqld : Replication

        node "Backup 1" as DBBackup1 {
            component mysqldump as DBBackup1Mysqldump
            component cron as DBBackup1Cron
        }

        DBPassiveMysqld --> DBBackup1 : Backup

        note as DBNote
            <b>Master Slave replication</b>
            ---
            MySQL Replication
        end note

        DBActiveMysqld .. DBNote
        DBPassiveMysqld .. DBNote
    }

    WSDatabase <--> DBActiveMysqld : reads/writes
    WSDatabase <.. DBPassiveMysqld : reads
}

frame External {
    interface Inbound as EXInbound
    node FirebaseAuth
    node StaticContent
    node Stripe

    FirebaseAuth -[hidden]- StaticContent
    StaticContent -[hidden]- Stripe

    EXInbound -> FirebaseAuth : http(s)
    EXInbound -> StaticContent : http(s)
    EXInbound -> Stripe : http(s)
}

WSExternal -> EXInbound : http(s)

@enduml