openapi: '3.0.3'
info:
  title: HiveTown
  description: HiveTown API Specification
  termsOfService: http://swagger.io/terms/
  contact:
    email: api@hivetown.pt
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.2.1
servers:
  - url: https://hivetown.pt/api
paths:
  /auth:
    summary: Get authenticated user
    operationId: getAuthenticatedUser
    tags:
      - auth
    security:
      - BearerAuth: []
    responses:
      '200':
        content:
          application/json:
            schema:
              type: object
              oneOf:
                - $ref: '#/components/schemas/Consumer'
                - $ref: '#/components/schemas/Producer'
              discriminator:
                propertyName: user.type
      '401':
        description: Unauthorized
        content:
          application/json:
            schema:
              ref: '#/components/schemas/UnauthorizedError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                allOf:
                  - ref: '#/components/schemas/NotFoundError'
                  - oneOf:
                    - type: object
                      properties:
                        message:
                          type: string
                          enum: [User not found]
                    - type: object
                      properties:
                        message:
                          type: string
                          enum: [CONSUMER not found]
                    - type: object
                      properties:
                        message:
                          type: string
                          enum: [PRODUCER not found]
                    
  /categories:
    get:
      summary: Get all categories
      operationId: getAllCategories
      tags:
        - categories
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/pageSize'
        - name: productMinPrice
          in: query
          description: Product minimum price
          required: false
          schema:
            type: number
            format: float
        - name: productMaxPrice
          in: query
          description: Product maximum price
          required: false
          schema:
            type: number
            format: float
        - name: productSearch
          in: query
          description: Product name search
          required: false
          schema:
            type: string
        - name: parentId
          in: query
          description: The parent category id (get subcategories of a category)
          required: false
          schema:
            type: number
            format: int32
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BaseItems'
                  - type: object
                    properties:
                      items:
                        type: array
                        items:
                          $ref: '#/components/schemas/Category'
    post:
      security:
        - BearerAuth: []
      summary: Create a category
      operationId: createCategory
      tags:
        - categories
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                parent:
                  type: number
                  format: int32
                  minimum: 1
                image:
                  $ref: '#/components/schemas/Image'
              required:
                - name
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        '400':
            description: Bad Request
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ValidationError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
  /categories/{categoryId}:
    parameters:
      - $ref: '#/components/parameters/categoryId'
    get:
      summary: Get a category
      operationId: getCategory
      tags:
        - categories
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BaseItems'
                  - type: object
                    properties:
                      items:
                        $ref: '#/components/schemas/Category'
        '400':
            description: Bad Request
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ValidationError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
    put:
      security:
        - BearerAuth: []
      summary: Update a category
      operationId: updateCategory
      tags:
        - categories
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                parent:
                  type: number
                  format: int32
                  minimum: 1
                image:
                  $ref: '#/components/schemas/Image'
              required:
                - name
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        '400':
            description: Bad Request
            content:
              application/json:
                schema:
                  oneOf:
                    - $ref: '#/components/schemas/ValidationError'
                    - $ref: '#/components/schemas/BadRequestError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
    delete:
      security:
        - BearerAuth: []
      summary: Delete a category
      operationId: deleteCategory
      tags:
        - categories
      responses:
        '204':
          description: No Content
        '400':
            description: Bad Request
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ValidationError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
  /categories/{idCategory}/fields:
    parameters:
      - $ref: '#/components/parameters/categoryId'
    get:
      summary: Get all fields of a category
      operationId: getAllFieldsOfCategory
      tags:
        - categories
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BaseItems'
                  - type: object
                    properties:
                      items:
                        type: array
                        items:
                          $ref: '#/components/schemas/Field'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
  /categories/{idCategory}/fields/{idField}:
    parameters:
      - $ref: '#/components/parameters/categoryId'
      - $ref: '#/components/parameters/fieldId'
    get:
      summary: Get a field of a category
      operationId: getFieldOfCategory
      tags:
        - categories
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Field'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
    put:
      security:
        - BearerAuth: []
      summary: Add a field to a category
      operationId: addFieldToCategory
      tags:
        - categories
      responses:
        '201':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Field'
        '400':
            description: Bad Request
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ValidationError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
    delete:
      security:
        - BearerAuth: []
      summary: Remove a field of a category
      operationId: removeFieldOfCategory
      tags:
        - categories
      responses:
        '204':
          description: No Content
        '400':
            description: Bad Request
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ValidationError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'

  /consumers:
    get:
      security:
        - BearerAuth: []
      summary: Get all consumers
      operationId: getAllConsumers
      tags:
        - consumers
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/pageSize'
        - $ref: '#/components/parameters/includeAll'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BaseItems'
                  - type: object
                    properties:
                      items:
                        type: array
                        items:
                          $ref: '#/components/schemas/Consumer'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
    post:
      security:
        - BearerAuth: []
      summary: Create a consumer
      operationId: createConsumer
      tags:
        - consumers
      requestBody:
        description: Consumer to create
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                phone:
                  type: string
                vat:
                  type: string
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Consumer'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ValidationError'
                  - $ref: '#/components/schemas/BadRequestError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictError'
  /consumers/{consumerId}:
    parameters:
      - $ref: '#/components/parameters/consumerId'
    get:
      security:
        - BearerAuth: []
      summary: Get a consumer
      operationId: getConsumer
      parameters:
        - $ref: '#/components/parameters/includeAll'
      tags:
        - consumers
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Consumer'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
    put:
      security:
        - BearerAuth: []
      summary: Update a consumer
      operationId: updateConsumer
      tags:
        - consumers
      requestBody:
        description: Consumer to update
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                email:
                  type: string
                phone:
                  type: string
                disableEmails:
                  type: boolean
                  default: false
              required:
                - name
                - email
                - phone
      responses:
        '201':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Consumer'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ValidationError'
                  - $ref: '#/components/schemas/BadRequestError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
    delete:
      security:
        - BearerAuth: []
      summary: Delete/disable a consumer
      operationId: deleteConsumer
      tags:
        - consumers
      responses:
        '204':
          description: No Content
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ValidationError'
                  - $ref: '#/components/schemas/BadRequestError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
  /consumers/{consumerId}/reativate:
    post:
      security:
        - BearerAuth: []
      summary: Reativate a consumer
      operationId: reativateConsumer
      tags:
        - consumers
      responses:
        '201':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Consumer'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ValidationError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
  /consumers/{consumerId}/addresses:
    parameters:
      - $ref: '#/components/parameters/consumerId'
    get:
      security:
        - BearerAuth: []
      summary: Get consumer addresses
      operationId: getConsumerAddresses
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/pageSize'
      tags:
        - consumers
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BaseItems'
                  - type: object
                    properties:
                      items:
                        type: array
                        items:
                          $ref: '#/components/schemas/Address'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
    post:
      security:
        - BearerAuth: []
      summary: Create a consumer address
      operationId: createConsumerAddress
      tags:
        - consumers
      requestBody:
        description: Consumer address to create
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Address'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Address'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ValidationError'
                  - $ref: '#/components/schemas/BadRequestError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
  /consumers/{consumerId}/cart:
    parameters:
      - $ref: '#/components/parameters/consumerId'
    get:
      security:
        - BearerAuth: []
      summary: Get consumer cart
      operationId: getConsumerCart
      tags:
        - consumers
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BaseItems'
                  - type: object
                    properties:
                      items:
                        type: array
                        items:
                          $ref: '#/components/schemas/CartItem'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
    post:
      security:
        - BearerAuth: []
      summary: Add an item to the consumer cart
      operationId: addToConsumerCart
      tags:
        - consumers
      requestBody:
        description: Item to add to the cart
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                producerProduct:
                  type: number
                  minimum: 1
                quantity:
                  type: integer
                  minimum: 1
                  maximum: 100
              required:
                - producerProduct
                - quantity
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CartItem'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ValidationError'
                  - $ref: '#/components/schemas/BadRequestError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
    delete:
      security:
        - BearerAuth: []
      summary: Clear the consumer cart
      operationId: clearConsumerCart
      tags:
        - consumers
      responses:
        '204':
          description: No Content
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ValidationError'
                  - $ref: '#/components/schemas/BadRequestError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
  /consumers/{consumerId}/cart/{producerProductId}:
    parameters:
      - $ref: '#/components/parameters/consumerId'
      - $ref: '#/components/parameters/producerProductId'
    put:
      security:
        - BearerAuth: []
      summary: Update the quantity of an item in the consumer cart
      operationId: updateConsumerCartItem
      tags:
        - consumers
      requestBody:
        description: Item to update
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                quantity:
                  type: integer
                  minimum: 1
                  maximum: 100
              required:
                - quantity
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CartItem'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ValidationError'
                  - $ref: '#/components/schemas/BadRequestError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
    delete:
      security:
        - BearerAuth: []
      summary: Remove an item from the consumer cart
      operationId: removeConsumerCartItem
      tags:
        - consumers
      responses:
        '204':
          description: No Content
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ValidationError'
                  - $ref: '#/components/schemas/BadRequestError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
  /consumers/{consumerId}/orders:
    parameters:
      - $ref: '#/components/parameters/consumerId'
    get:
      security:
        - BearerAuth: []
      summary: Get the consumer orders
      operationId: getConsumerOrders
      tags:
        - consumers
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/pageSize'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BaseItems'
                  - type: object
                    properties:
                      items:
                        type: array
                        items:
                          $ref: '#/components/schemas/Order'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
    post:
      security:
        - BearerAuth: []
      summary: Create a new order
      operationId: createConsumerOrder
      tags:
        - consumers
      requestBody:
        description: Order to create
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                shippingAddressId:
                  type: number
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  sessionId:
                    type: string
                  checkout_url:
                    type: string
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ValidationError'
                  - $ref: '#/components/schemas/BadRequestError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
  /consumers/{consumerId}/orders/success:
    parameters:
      - $ref: '#/components/parameters/consumerId'
      - name: sessionId
        in: query
        required: true
        schema:
          type: string
    get:
      security:
        - BearerAuth: []
      summary: Get the consumer orders
      operationId: getConsumerOrders
      tags:
        - consumers
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/pageSize'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                description: Stripe session
                additionalProperties: true
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
  /consumers/{consumerId}/orders/cancel:
    parameters:
      - $ref: '#/components/parameters/consumerId'
      - name: session_id
        in: query
        required: true
        schema:
          type: string
    post:
      security:
        - BearerAuth: []
      summary: Cancel an order
      operationId: cancelConsumerOrder
      tags:
        - consumers
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: string
                description: Order cancelled
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ValidationError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
  /consumers/{consumerId}/orders/export:
    parameters:
      - $ref: '#/components/parameters/consumerId'
    get:
      security:
        - BearerAuth: []
      summary: Export the consumer orders
      operationId: exportConsumerOrders
      tags:
        - consumers
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ExportOrder'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
  /consumers/{consumerId}/orders/{orderId}:
    parameters:
      - $ref: '#/components/parameters/consumerId'
      - $ref: '#/components/parameters/orderId'
    get:
      security:
        - BearerAuth: []
      summary: Get a consumer order
      operationId: getConsumerOrder
      tags:
        - consumers
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  order:
                    $ref: '#/components/schemas/Order'
                  status:
                    type: string
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
    delete:
      security:
        - BearerAuth: []
      summary: Cancel a consumer order
      operationId: cancelConsumerOrder
      tags:
        - consumers
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  refund:
                    type: object
                    additionalProperties: true
                    description: Stripe refund
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ValidationError'
                  - $ref: '#/components/schemas/BadRequestError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
  /consumers/{consumerId}/orders/{orderId}/items:
    parameters:
      - $ref: '#/components/parameters/consumerId'
      - $ref: '#/components/parameters/orderId'
    get:
      security:
        - BearerAuth: []
      summary: Get the consumer order items
      operationId: getConsumerOrderItems
      tags:
        - consumers
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BaseItems'
                  - type: object
                    properties:
                      items:
                        type: array
                        items:
                          $ref: '#/components/schemas/OrderItem'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
  /consumers/{consumerId}/orders/{orderId}/items/{producerProductId}:
    parameters:
      - $ref: '#/components/parameters/consumerId'
      - $ref: '#/components/parameters/orderId'
      - $ref: '#/components/parameters/producerProductId'
    get:
      security:
        - BearerAuth: []
      summary: Get a consumer order item
      operationId: getConsumerOrderItem
      tags:
        - consumers
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderItem'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
  /consumers/{consumerId}/orders/{orderId}/items/{producerProductId}/shipment:
    parameters:
      - $ref: '#/components/parameters/consumerId'
      - $ref: '#/components/parameters/orderId'
      - $ref: '#/components/parameters/producerProductId'
    get:
      security:
        - BearerAuth: []
      summary: Get the consumer order item shipment
      operationId: getConsumerOrderItemShipment
      tags:
        - consumers
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Shipment'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'

  /healthz:
    get:
      summary: Health check
      operationId: healthz
      tags:
        - healthz
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: string
  
  /notifications:
    get:
      security:
        - BearerAuth: []
      summary: Get the notifications
      operationId: getNotifications
      tags:
        - notifications
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/pageSize'
        - $ref: '#/components/parameters/unreadOnly'
        - $ref: '#/components/parameters/after'
        - $ref: '#/components/parameters/before'
        
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BaseItems'
                  - type: object
                    properties:
                      items:
                        type: array
                        items:
                          $ref: '#/components/schemas/Notification'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ValidationError'
                  - $ref: '#/components/schemas/BadRequestError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
  /notifications/{notificationId}:
    parameters:
      - $ref: '#/components/parameters/notificationId'
    get:
      security:
        - BearerAuth: []
      summary: Get a notification
      operationId: getNotification
      tags:
        - notifications
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Notification'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ValidationError'
                  - $ref: '#/components/schemas/BadRequestError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
    delete:
      security:
        - BearerAuth: []
      summary: Delete a notification
      operationId: deleteNotification
      tags:
        - notifications
      responses:
        '204':
          description: No Content
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
  /notifications/{notificationId}/read:
    parameters:
      - $ref: '#/components/parameters/notificationId'
    post:
      security:
        - BearerAuth: []
      summary: Mark a notification as read
      operationId: markNotificationAsRead
      tags:
        - notifications
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Notification'
        '204':
          description: No Content if the notification is already read
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
  /notifications/{notificationId}/unread:
    parameters:
      - $ref: '#/components/parameters/notificationId'
    post:
      security:
        - BearerAuth: []
      summary: Mark a notification as unread
      operationId: markNotificationAsUnread
      tags:
        - notifications
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Notification'
        '204':
          description: No Content if the notification is already unread
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'

  /producers:
    get:
      security:
        - BearerAuth: []
      summary: Get the producers
      operationId: getProducers
      tags:
        - producers
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/pageSize'
        - $ref: '#/components/parameters/includeAll'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BaseItems'
                  - type: object
                    properties:
                      items:
                        type: array
                        items:
                          $ref: '#/components/schemas/Producer'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
    post:
      security:
        - BearerAuth: []
      summary: Create a producer
      operationId: createProducer
      tags:
        - producers
      requestBody:
        description: The producer to create
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                phone:
                  type: string
                vat:
                  type: number
              required:
                - name
                - phone
                - vat
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Producer'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ValidationError'
                  - $ref: '#/components/schemas/BadRequestError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictError'
  /producers/{producerId}:
    parameters:
      - $ref: '#/components/parameters/producerId'
    get:
      security:
        - BearerAuth: []
      summary: Get a producer
      operationId: getProducer
      tags:
        - producers
      parameters:
        - $ref: '#/components/parameters/includeAll'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Producer'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
    put:
      security:
        - BearerAuth: []
      summary: Update a producer
      operationId: updateProducer
      tags:
        - producers
      parameters:
        - $ref: '#/components/parameters/includeAll'
      requestBody:
        description: The producer to update
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                email:
                  type: string
                phone:
                  type: string
                disableEmails:
                  type: boolean
                  default: false
              required:
                - name
                - email
                - phone
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Producer'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ValidationError'
                  - $ref: '#/components/schemas/BadRequestError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
    delete:
      security:
        - BearerAuth: []
      summary: Delete/disable a producer
      operationId: deleteProducer
      tags:
        - producers
      responses:
        '204':
          description: No Content
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
  /producers{producerId}/reativate:
    parameters:
      - $ref: '#/components/parameters/producerId'
    post:
      security:
        - BearerAuth: []
      summary: Reativate a producer
      operationId: reativateProducer
      tags:
        - producers
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Producer'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
  /producers/{producerId}/products:
    parameters:
      - $ref: '#/components/parameters/producerId'
    get:
      security:
        - BearerAuth: []
      summary: Get a producer's products
      operationId: getProducerProducts
      tags:
        - producers
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/pageSize'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BaseItems'
                  - type: object
                    properties:
                      results:
                        type: array
                        items:
                          $ref: '#/components/schemas/ProducerProduct'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
    post:
      security:
        - BearerAuth: []
      summary: Create a producer product
      operationId: createProducerProduct
      tags:
        - producers
      requestBody:
        description: The producer product to create
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                currentPrice:
                  type: number
                productionDate:
                  type: string
                  format: date
                stock:
                  type: number
                productionUnitId:
                  type: number
                productSpecId:
                  type: number
              required:
                - currentPrice
                - productionDate
                - stock
                - productionUnitId
                - productSpecId
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProducerProduct'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ValidationError'
                  - $ref: '#/components/schemas/BadRequestError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
  /producers/{producerId}/products/{producerProductId}:
    parameters:
      - $ref: '#/components/parameters/producerId'
      - $ref: '#/components/parameters/producerProductId'
    put:
      security:
        - BearerAuth: []
      summary: Update a producer product
      operationId: updateProducerProduct
      tags:
        - producers
      requestBody:
        description: The producer product to update
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                currentPrice:
                  type: number
                productionDate:
                  type: string
                  format: date
                stock:
                  type: number
                productionUnitId:
                  type: number
              required:
                - currentPrice
                - productionDate
                - stock
                - productionUnitId
      responses:
        '201':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProducerProduct'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ValidationError'
                  - $ref: '#/components/schemas/BadRequestError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
    delete:
      security:
        - BearerAuth: []
      summary: Delete a producer product
      operationId: deleteProducerProduct
      tags:
        - producers
      responses:
        '204':
          description: No Content
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
  /producers/{producerId}/units:
    parameters:
      - $ref: '#/components/parameters/producerId'
    get:
      security:
        - BearerAuth: []
      summary: Get a producer's units
      operationId: getProducerUnits
      tags:
        - producers
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/pageSize'
        - $ref: '#/components/parameters/search'
        - $ref: '#/components/parameters/raio'
        - $ref: '#/components/parameters/addressId'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BaseItems'
                  - type: object
                    properties:
                      results:
                        type: array
                        items:
                          $ref: '#/components/schemas/ProductionUnit'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
    post:
      security:
        - BearerAuth: []
      summary: Create a producer unit
      operationId: createProducerUnit
      tags:
        - producers
      requestBody:
        description: The producer unit to create
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                address:
                  type: number
              required:
                - name
                - address
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductionUnit'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ValidationError'
                  - $ref: '#/components/schemas/BadRequestError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
  /producers/{producerId}/units/{productionUnitId}:
    parameters:
      - $ref: '#/components/parameters/producerId'
      - $ref: '#/components/parameters/productionUnitId'
    get:
      security:
        - BearerAuth: []
      summary: Get a production's unit
      operationId: getProductionUnit
      tags:
        - producers
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductionUnit'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
    put:
      security:
        - BearerAuth: []
      summary: Update a production unit
      operationId: updateProductionUnit
      tags:
        - producers
      requestBody:
        description: The production unit to update
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                address:
                  type: number
              required:
                - name
                - address
      responses:
        '201':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductionUnit'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ValidationError'
                  - $ref: '#/components/schemas/BadRequestError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
    delete:
      security:
        - BearerAuth: []
      summary: Delete a producer unit
      operationId: deleteProducerUnit
      tags:
        - producers
      responses:
        '204':
          description: No Content
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
  /producers/{producerId}/carriers:
    parameters:
      - $ref: '#/components/parameters/producerId'
    get:
      security:
        - BearerAuth: []
      summary: Get a producer's carriers
      operationId: getProducerCarriers
      tags:
        - producers
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/pageSize'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BaseItems'
                  - type: object
                    properties:
                      results:
                        type: array
                        items:
                          $ref: '#/components/schemas/Carrier'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
    post:
      security:
        - BearerAuth: []
      summary: Create a carrier
      operationId: createCarrier
      tags:
        - producers
      requestBody:
        description: The carrier to create
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                licensePlate:
                  type: string
                image:
                  $ref: '#/components/schemas/Image'
                productionUnitId:
                  type: number
              required:
                - licensePlate
                - image
                - productionUnitId
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Carrier'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ValidationError'
                  - $ref: '#/components/schemas/BadRequestError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
  /producers/{producerId}/carriers/{carrierId}:
    parameters:
      - $ref: '#/components/parameters/producerId'
      - $ref: '#/components/parameters/carrierId'
    get:
      security:
        - BearerAuth: []
      summary: Get a carrier
      operationId: getCarrier
      tags:
        - producers
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Carrier'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
    put:
      security:
        - BearerAuth: []
      summary: Update a carrier
      operationId: updateCarrier
      tags:
        - producers
      requestBody:
        description: The carrier to update
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                image:
                  $ref: '#/components/schemas/Image'
                productionUnitId:
                  type: number
                status:
                  type: string
                  enum:
                    - AVAILABLE
                    - UNAVAILABLE
              required:
                - image
                - productionUnitId
                - status
      responses:
        '201':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Carrier'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ValidationError'
                  - $ref: '#/components/schemas/BadRequestError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
    delete:
      security:
        - BearerAuth: []
      summary: Delete a carrier
      operationId: deleteCarrier
      tags:
        - producers
      responses:
        '204':
          description: No Content
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ValidationError'
                  - $ref: '#/components/schemas/BadRequestError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
  /producers/{producerId}/units/{productionUnitId}/carriers:
    parameters:
      - $ref: '#/components/parameters/producerId'
      - $ref: '#/components/parameters/productionUnitId'
    get:
      security:
        - BearerAuth: []
      summary: Get a production unit's carriers
      operationId: getProductionUnitCarriers
      tags:
        - producers
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/pageSize'
        - $ref: '#/components/parameters/status'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BaseItems'
                  - type: object
                    properties:
                      results:
                        type: array
                        items:
                          $ref: '#/components/schemas/Carrier'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
  /producers/{producerId}/units/{productionUnitId}/carriers/{carrierId}/shipments:
    parameters:
      - $ref: '#/components/parameters/producerId'
      - $ref: '#/components/parameters/productionUnitId'
      - $ref: '#/components/parameters/carrierId'
    post: 
      security:
        - BearerAuth: []
      summary: Create a shipment
      operationId: createShipment
      tags:
        - producers
      requestBody:
        description: The shipment to create
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                shipmentId:
                  type: number
              required:
                - carrierId
                - shipmentDate
                - quantity
                - unit
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Shipment'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ValidationError'
                  - $ref: '#/components/schemas/BadRequestError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
  /producers/{producerId}/units/{productionUnitId}/products:
    parameters:
      - $ref: '#/components/parameters/producerId'
      - $ref: '#/components/parameters/productionUnitId'
    get:
      security:
        - BearerAuth: []
      summary: Get a production unit's products
      operationId: getProductionUnitProducts
      tags:
        - producers
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/pageSize'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BaseItems'
                  - type: object
                    properties:
                      results:
                        type: array
                        items:
                          $ref: '#/components/schemas/ProducerProduct'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
  /producers/{producerId}/orders:
    parameters:
      - $ref: '#/components/parameters/producerId'
    get:
      security:
        - BearerAuth: []
      summary: Get a producer's orders
      operationId: getProducerOrders
      tags:
        - producers
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/pageSize'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BaseItems'
                  - type: object
                    properties:
                      results:
                        type: array
                        items:
                          $ref: '#/components/schemas/Order'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
  /producers/{producerId}/orders/{orderId}:
    parameters:
      - $ref: '#/components/parameters/producerId'
      - $ref: '#/components/parameters/orderId'
    get:
      security:
        - BearerAuth: []
      summary: Get a producer's order
      operationId: getProducerOrder
      tags:
        - producers
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
  /producers/{producerId}/orders/{orderId}/items:
    parameters:
      - $ref: '#/components/parameters/producerId'
      - $ref: '#/components/parameters/orderId'
    get:
      security:
        - BearerAuth: []
      summary: Get a producer's order items
      operationId: getProducerOrderItems
      tags:
        - producers
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/pageSize'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BaseItems'
                  - type: object
                    properties:
                      results:
                        type: array
                        items:
                          $ref: '#/components/schemas/OrderItem'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
  /producers/{producerId}/orders/{orderId}/items/{producerProductId}:
    parameters:
      - $ref: '#/components/parameters/producerId'
      - $ref: '#/components/parameters/orderId'
      - $ref: '#/components/parameters/producerProductId'
    get:
      security:
        - BearerAuth: []
      summary: Get a producer's order item
      operationId: getProducerOrderItem
      tags:
        - producers
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderItem'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
  /producers/{producerId}/orders/{orderId}/items/{producerProductId}/shipment:
    parameters:
      - $ref: '#/components/parameters/producerId'
      - $ref: '#/components/parameters/orderId'
      - $ref: '#/components/parameters/producerProductId'
    get:
      security:
        - BearerAuth: []
      summary: Get a producer's order item shipment
      operationId: getProducerOrderItemShipment
      tags:
        - producers
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Shipment'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
  /producers/{producerId}/orders/{orderId}/items/{producerProductId}/shipment/events:
    parameters:
      - $ref: '#/components/parameters/producerId'
      - $ref: '#/components/parameters/orderId'
      - $ref: '#/components/parameters/producerProductId'
    post:
      security:
        - BearerAuth: []
      summary: Create a producer's order item shipment event
      operationId: createProducerOrderItemShipmentEvent
      tags:
        - producers
      requestBody:
        description: The shipment event to create
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
                  enum:
                    - 0
                    - 1
                    - 2
                    - 3
                    - 4
                  description: The shipment event status
                addressId:
                  type: number
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Shipment'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
 
  /products:
    get:
      security:
        - BearerAuth: []
      summary: Get all products
      operationId: getProducts
      tags:
        - products
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/pageSize'
        - name: categoryId
          in: query
          description: Category ID
          required: false
          schema:
            type: integer
            format: int32
            minimum: 1
        - $ref: '#/components/parameters/search'
        # TODO field
        - $ref: '#/components/parameters/maxPrice'
        - $ref: '#/components/parameters/minPrice'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BaseItems'
                  - type: object
                    properties:
                      results:
                        type: array
                        items:
                          $ref: '#/components/schemas/ProductSpec'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
    post:
      security:
        - BearerAuth: []
      summary: Create a product
      operationId: createProduct
      tags:
        - products
      requestBody:
        description: The product to create
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
                images:
                  type: array
                  items:
                    $ref: '#/components/schemas/Image'
                  maxItems: 5
              required:
                - name
                - description
                - images
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductSpec'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
  /products/{productSpecId}: 
    parameters:
      - $ref: '#/components/parameters/productSpecId'
    get:
      summary: Get a product
      operationId: getProduct
      tags:
        - products
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductSpec'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
    put:
      security:
        - BearerAuth: []
      summary: Update a product
      operationId: updateProduct
      tags:
        - products
      requestBody:
        description: The product to update
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
                images:
                  type: array
                  items:
                    $ref: '#/components/schemas/Image'
                  maxItems: 5
              required:
                - name
                - description
                - images
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductSpec'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
    delete:
      security:
        - BearerAuth: []
      summary: Delete a product
      operationId: deleteProduct
      tags:
        - products
      responses:
        '204':
          description: No Content
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
  /products/{productSpecId}/categories:
    parameters:
      - $ref: '#/components/parameters/productSpecId'
    get:
      summary: Get all categories of a product
      operationId: getProductCategories
      tags:
        - products
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/pageSize'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BaseItems'
                  - type: object
                    properties:
                      results:
                        type: array
                        items:
                          $ref: '#/components/schemas/Category'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
  /products/{productSpecId}/categories/{categoryId}:
    parameters:
      - $ref: '#/components/parameters/productSpecId'
      - $ref: '#/components/parameters/categoryId'
    get:
      summary: Get a category of a product
      operationId: getProductCategory
      tags:
        - products
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
    put:
      security:
        - BearerAuth: []
      summary: Add a category to a product
      operationId: addProductCategory
      tags:
        - products
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
    delete:
      security:
        - BearerAuth: []
      summary: Remove a category from a product
      operationId: removeProductCategory
      tags:
        - products
      responses:
        '204':
          description: No Content
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
  /products/{productSpecId}/categories/{categoryId}/fields:
    parameters:
      - $ref: '#/components/parameters/productSpecId'
      - $ref: '#/components/parameters/categoryId'
    get:
      summary: Get all fields of a category of a product
      operationId: getProductCategoryFields
      tags:
        - products
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/pageSize'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BaseItems'
                  - type: object
                    properties:
                      results:
                        type: array
                        items:
                          $ref: '#/components/schemas/ProductSpecField'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
  /products/{productSpecId}/categories/{categoryId}/fields/{fieldId}:
    parameters:
      - $ref: '#/components/parameters/productSpecId'
      - $ref: '#/components/parameters/categoryId'
      - $ref: '#/components/parameters/fieldId'
    get:
      summary: Get a field of a category of a product
      operationId: getProductCategoryField
      tags:
        - products
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductSpecField'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
    put:
      security:
        - BearerAuth: []
      summary: Add a field to a category of a product
      operationId: addProductCategoryField
      tags:
        - products
      requestBody:
        description: The field to add
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                value:
                  type: string
              required:
                - value
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductSpecField'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
    delete:
      security:
        - BearerAuth: []
      summary: Remove a field from a category of a product
      operationId: removeProductCategoryField
      tags:
        - products
      responses:
        '204':
          description: No Content
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
  /products/{productSpecId}/producers:
    parameters:
      - $ref: '#/components/parameters/productSpecId'
    get:
      summary: Get all producers of a product
      operationId: getProductProducers
      tags:
        - products
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/pageSize'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BaseItems'
                  - type: object
                    properties:
                      results:
                        type: array
                        items:
                          $ref: '#/components/schemas/Producer'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
  /products/{productSpecId}/products:
    parameters:
      - $ref: '#/components/parameters/productSpecId'
    get:
      summary: Get all products of a product
      operationId: getProductProducts
      tags:
        - products
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/pageSize'
        - $ref: '#/components/parameters/raio'
        - $ref: '#/components/parameters/addressId'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BaseItems'
                  - type: object
                    properties:
                      results:
                        type: array
                        items:
                          $ref: '#/components/schemas/ProducerProduct'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
  /products/{productSpecId}/products/{producerProductId}:
    parameters:
      - $ref: '#/components/parameters/productSpecId'
      - $ref: '#/components/parameters/producerProductId'
    get:
      summary: Get a product of a product
      operationId: getProductProduct
      tags:
        - products
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProducerProduct'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'

  /reports/admin/flashcards:
    get:
      summary: Get flashcards report
      operationId: getAdminFlashcards
      tags:
        - reports
      parameters:
        - name: categoryId
          in: query
          description: Category ID
          required: false
          schema:
            type: integer
            format: int32
        - $ref: '#/components/parameters/dataInicio'
        - $ref: '#/components/parameters/dataFim'
        - $ref: '#/components/parameters/raio'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReportFlashcards'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
  /reports/admin/map:
    get:
      summary: Get map report
      operationId: getAdminMap
      tags:
        - reports
      parameters:
        - name: categoryId
          in: query
          description: Category ID
          required: false
          schema:
            type: integer
            format: int32
        - $ref: '#/components/parameters/dataInicio'
        - $ref: '#/components/parameters/dataFim'
        - $ref: '#/components/parameters/raio'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReportMap'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
  /reports/admin/evolution:
    get:
      summary: Get evolution report
      operationId: getAdminEvolution
      tags:
        - reports
      parameters:
        - name: categoryId
          in: query
          description: Category ID
          required: false
          schema:
            type: integer
            format: int32
        - $ref: '#/components/parameters/dataInicio'
        - $ref: '#/components/parameters/dataFim'
        - $ref: '#/components/parameters/raio'
        - name: numeroEncomendas
          in: query
          description: Number of orders
          required: false
          schema:
            type: integer
            format: int32
        - name: totalProdutos
          in: query
          description: Total products
          required: false
          schema:
            type: integer
            format: int32
        - name: comprasTotais
          in: query
          description: Total purchases
          required: false
          schema:
            type: integer
            format: int32
        - name: numeroProdutosEncomendados
          in: query
          description: Number of ordered products
          required: false
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReportEvolution'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
  /reports/admin/products:
    get:
      summary: Get products report
      operationId: getAdminProducts
      tags:
        - reports
      parameters:
        - name: categoryId
          in: query
          description: Category ID
          required: false
          schema:
            type: integer
            format: int32
        - $ref: '#/components/parameters/dataInicio'
        - $ref: '#/components/parameters/dataFim'
        - $ref: '#/components/parameters/raio'
        - name: numeroEncomendas
          in: query
          description: Number of orders
          required: false
          schema:
            type: integer
            format: int32
        - name: totalProdutos
          in: query
          description: Total products
          required: false
          schema:
            type: integer
            format: int32
        - name: comprasTotais
          in: query
          description: Total purchases
          required: false
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReportProducts'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
  /reports/admin/clients:
    get:
      summary: Get clients report
      operationId: getAdminClients
      tags:
        - reports
      parameters:
        - name: categoryId
          in: query
          description: Category ID
          required: false
          schema:
            type: integer
            format: int32
        - $ref: '#/components/parameters/dataInicio'
        - $ref: '#/components/parameters/dataFim'
        - $ref: '#/components/parameters/raio'
        - name: numeroEncomendas
          in: query
          description: Number of orders
          required: false
          schema:
            type: integer
            format: int32
        - name: totalProdutos
          in: query
          description: Total products
          required: false
          schema:
            type: integer
            format: int32
        - name: comprasTotais
          in: query
          description: Total purchases
          required: false
          schema:
            type: integer
            format: int32
        - name: numeroProdutosEncomendados
          in: query
          description: Number of ordered products
          required: false
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReportClients'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
  /reports/{userId}/flashcards:
    parameters:
      - $ref: '#/components/parameters/userId'
    get:
      summary: Get flashcards report
      operationId: getFlashcards
      tags:
        - reports
      parameters:
        - name: categoryId
          in: query
          description: Category ID
          required: false
          schema:
            type: integer
            format: int32
        - $ref: '#/components/parameters/dataInicio'
        - $ref: '#/components/parameters/dataFim'
        - $ref: '#/components/parameters/raio'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReportFlashcards'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
  /reports/{userId}/map:
    parameters:
      - $ref: '#/components/parameters/userId'
    get:
      summary: Get map report
      operationId: getMap
      tags:
        - reports
      parameters:
        - name: categoryId
          in: query
          description: Category ID
          required: false
          schema:
            type: integer
            format: int32
        - $ref: '#/components/parameters/dataInicio'
        - $ref: '#/components/parameters/dataFim'
        - $ref: '#/components/parameters/raio'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReportMap'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
  /reports/{userId}/evolution:
    parameters:
      - $ref: '#/components/parameters/userId'
    get:
      summary: Get evolution report
      operationId: getEvolution
      tags:
        - reports
      parameters:
        - name: categoryId
          in: query
          description: Category ID
          required: false
          schema:
            type: integer
            format: int32
        - $ref: '#/components/parameters/dataInicio'
        - $ref: '#/components/parameters/dataFim'
        - $ref: '#/components/parameters/raio'
        - name: numeroEncomendas
          in: query
          description: Number of orders
          required: false
          schema:
            type: integer
            format: int32
        - name: totalProdutos
          in: query
          description: Total products
          required: false
          schema:
            type: integer
            format: int32
        - name: comprasTotais
          in: query
          description: Total purchases
          required: false
          schema:
            type: integer
            format: int32
        - name: numeroProdutosEncomendados
          in: query
          description: Number of ordered products
          required: false
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReportEvolution'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
  /reports/{userId}/products:
    parameters:
      - $ref: '#/components/parameters/userId'
    get:
      summary: Get products report
      operationId: getProducts
      tags:
        - reports
      parameters:
        - name: categoryId
          in: query
          description: Category ID
          required: false
          schema:
            type: integer
            format: int32
        - $ref: '#/components/parameters/dataInicio'
        - $ref: '#/components/parameters/dataFim'
        - $ref: '#/components/parameters/raio'
        - name: numeroEncomendas
          in: query
          description: Number of orders
          required: false
          schema:
            type: integer
            format: int32
        - name: totalProdutos
          in: query
          description: Total products
          required: false
          schema:
            type: integer
            format: int32
        - name: comprasTotais
          in: query
          description: Total purchases
          required: false
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReportProducts'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
  /reports/{userId}/clients:
    parameters:
      - $ref: '#/components/parameters/userId'
    get:
      summary: Get clients report
      operationId: getClients
      tags:
        - reports
      parameters:
        - name: categoryId
          in: query
          description: Category ID
          required: false
          schema:
            type: integer
            format: int32
        - $ref: '#/components/parameters/dataInicio'
        - $ref: '#/components/parameters/dataFim'
        - $ref: '#/components/parameters/raio'
        - name: numeroEncomendas
          in: query
          description: Number of orders
          required: false
          schema:
            type: integer
            format: int32
        - name: totalProdutos
          in: query
          description: Total products
          required: false
          schema:
            type: integer
            format: int32
        - name: comprasTotais
          in: query
          description: Total purchases
          required: false
          schema:
            type: integer
            format: int32
        - name: numeroProdutosEncomendados
          in: query
          description: Number of ordered products
          required: false
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReportClients'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'

  /webhook:
    post:
      summary: Stripe Webhook
      operationId: webhook
      tags:
        - webhook
      requestBody:
        description: Webhook
        required: true
        content:
          application/json:
            schema:
              type: object
              additionalProperties: true
              description: Stripe Webhook
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  parameters:
    page:
      name: page
      in: query
      description: Page number
      required: false
      schema:
        type: integer
        format: int32
        minimum: 1
        default: 1
    pageSize:
      name: pageSize
      in: query
      description: Page size
      required: false
      schema:
        type: integer
        format: int32
        minimum: 1
        maximum: 100
        default: 24
    status:
      name: status
      in: query
      description: Status
      required: false
      schema:
        type: string
    includeAll:
      name: includeAll
      in: query
      description: Include deactivated items
      required: false
      schema:
        type: boolean
        default: false

    # ids
    categoryId:
      name: categoryId
      in: path
      description: The category id
      required: true
      schema:
        type: number
        format: int32
        minimum: 1
    fieldId:
      name: fieldId
      in: path
      description: The field id
      required: true
      schema:
        type: number
        format: int32
        minimum: 1
    consumerId:
      name: consumerId
      in: path
      description: The consumer id
      required: true
      schema:
        type: number
        format: int32
        minimum: 1
    producerProductId:
      name: producerProductId
      in: path
      description: The producer product id
      required: true
      schema:
        type: number
        format: int32
        minimum: 1
    orderId:
      name: orderId
      in: path
      description: The order id
      required: true
      schema:
        type: number
        format: int32
        minimum: 1
    unreadOnly:
      name: unreadOnly
      in: query
      description: Unread only
      required: false
      schema:
        type: boolean
        default: false
    userId:
      name: userId
      in: path
      description: The user id
      required: true
      schema:
        type: number
        format: int32
        minimum: 1
    productionUnitId:
      name: productionUnitId
      in: path
      description: The production unit id
      required: true
      schema:
        type: number
        format: int32
        minimum: 1
    carrierId:
      name: carrierId
      in: path
      description: The carrier id
      required: true
      schema:
        type: number
        format: int32
        minimum: 1
    producerId:
      name: producerId
      in: path
      description: The producer id
      required: true
      schema:
        type: number
        format: int32
        minimum: 1
    productSpecId:
      name: productSpecId
      in: path
      description: The product spec id
      required: true
      schema:
        type: number
        format: int32
        minimum: 1
    after:
      name: after
      in: query
      description: After
      required: false
      schema:
        type: string
        format: date-time
    before:
      name: before
      in: query
      description: Before
      required: false
      schema:
        type: string
        format: date-time
    dataInicio:
      name: dataInicio
      in: query
      description: Start date
      required: false
      schema:
        type: string
        format: date-time
    dataFim:
      name: dataFim
      in: query
      description: End date
      required: false
      schema:
        type: string
        format: date-time
    raio:
      name: raio
      in: query
      description: Radius
      required: false
      schema:
        type: number
        format: float
        minimum: 0
    notificationId:
      name: notificationId
      in: path
      description: The notification id
      required: true
      schema:
        type: number
        format: int32
        minimum: 1
    maxPrice:
      name: maxPrice
      in: query
      description: Max price
      required: false
      schema:
        type: number
        format: float
        minimum: 0
    minPrice:
      name: minPrice
      in: query
      description: Min price
      required: false
      schema:
        type: number
        format: float
        minimum: 0
    search:
      name: search
      in: query
      description: Search
      required: false
      schema:
        type: string
    addressId:
      name: addressId
      in: query
      description: The address id
      required: true
      schema:
        type: number
        format: int32
        minimum: 1
  schemas:
    # Errors
    ApiError:
      type: object
      properties:
        message:
          type: string
        statusCode:
          type: integer
          format: int32
        details:
          type: object
          additionalProperties: true
      required:
        - message
        - statusCode
    BadRequestError:
      allOf:
        - $ref: '#/components/schemas/ApiError'
        - type: object
          properties:
            statusCode:
              type: integer
              format: int32
              enum: [400]
    ConflictError:
      allOf:
        - $ref: '#/components/schemas/ApiError'
        - type: object
          properties:
            statusCode:
              type: integer
              format: int32
              enum: [409]
    ForbiddenError:
      allOf:
        - $ref: '#/components/schemas/ApiError'
        - type: object
          properties:
            statusCode:
              type: integer
              format: int32
              enum: [403]
        - oneOf:
          - type: object
            properties:
              message:
                type: string
                enum: [User does not have enough permissions]
              details:
                type: object
                properties:
                  user:
                    type: array
                    items:
                      type: string
                  required:
                    type: array
                    items:
                      type: string

    NotFoundError:
      allOf:
        - $ref: '#/components/schemas/ApiError'
        - type: object
          properties:
            statusCode:
              type: integer
              format: int32
              enum: [404]
    UnauthorizedError:
      allOf:
        - $ref: '#/components/schemas/ApiError'
        - type: object
          properties:
            statusCode:
              type: integer
              format: int32
              enum: [401]
        - oneOf:
          - type: object
            properties:
              message:
                type: string
                enum: [Authorization bearer is required but was not provided]
          - type: object
            properties:
              message:
                type: string
                enum: [Authorization type must be Bearer]
          - type: object
            properties:
              message:
                type: string
                enum: [Authorization token is required but was not provided]
          - type: object
            properties:
              message:
                type: string
                enum: [Authorization token is invalid]
    ValidationError:
      description: Joi validation error
      allOf:
        - $ref: '#/components/schemas/BadRequestError'
        - type: object
          properties:
            details:
              type: object
              properties:
                params:
                  type: array
                  items:
                    $ref: '#/components/schemas/JoiError'
                query:
                  type: array
                  items:
                    $ref: '#/components/schemas/JoiError'
                body:
                  type: array
                  items:
                    $ref: '#/components/schemas/JoiError'
          required:
            - details


    # Generic
    JoiError:
      type: object
      properties:
        isJoi:
          type: boolean
        details:
          type: array
          items:
            type: object
            properties:
              message:
                type: string
              path:
                type: array
                items:
                  type: string
              type:
                type: string
              context:
                type: object
                additionalProperties:
                  type: object
                  properties:
                    key:
                      type: string
                    label:
                      type: string
                    value:
                      type: string

    BaseItems:
      type: object
      properties:
        items:
          type: array
          items:
            type: object
        totalItems:
          type: number
          format: int32
        totalPages:
          type: number
          format: int32
        page:
          type: number
          format: int32
        pageSize:
          type: number
          format: int32
      required:
        - items
        - totalItems
        - totalPages
        - page
        - pageSize

    # Models
    Role:
      type: object
      properties:
        id:
          type: number
          format: int32
          readOnly: true
        name:
          type: string
        permissions:
          type: number
          format: int32
      required:
        - name
        - permissions
    Image:
      type: object
      properties:
        id:
          type: number
          format: int32
          readOnly: true
        name: 
          type: string
        url:
          type: string
        alt:
          type: string
      required:
        - name
        - url
        - alt
    Address:
      type: object
      properties:
        id:
          type: number
          format: int32
          readOnly: true
        number:
          type: number
        door:
          type: string
        floor:
          type: number
        zipCode:
          type: string
        street:
          type: string
        parish:
          type: string
        county:
          type: string
        city:
          type: string
        district:
          type: string
        latitude:
          type: number
          format: float
        longitude:
          type: number
          format: float
      required:
        - number
        - door
        - zipCode
        - street
        - parish
        - county
        - city
        - district
        - latitude
        - longitude
    User:
      type: object
      properties:
        id:
          type: number
          format: int32
          readOnly: true
        name:
          type: string
        email:
          type: string
        phone:
          type: string
        vat:
          type: string
        role:
          $ref: '#/components/schemas/Role'
        type:
          enum:
            - CONSUMER
            - PRODUCER
        disableEmails:
          type: boolean
        image:
          $ref: '#/components/schemas/Image'
      required:
        - name
        - email
        - phone
        - vat
        - type
        - disableEmails
    Consumer:
      type: object
      properties:
        id:
          type: number
          format: int32
          readOnly: true
        user:
          $ref: '#/components/schemas/User'
        addresses:
          type: array
          items:
            $ref: '#/components/schemas/Address'
        deletedAt:
          type: string
          format: date-time
      required:
        - user
    Producer:
      type: object
      properties:
        id:
          type: number
          format: int32
          readOnly: true
        user:
          $ref: '#/components/schemas/User'
        imageShowcase:
          type: array
          items:
            $ref: '#/components/schemas/Image'
        deletedAt:
          type: string
          format: date-time
      required:
        - user
    Category:
      type: object
      properties:
        id:
          type: number
          format: int32
          readOnly: true
        name:
          type: string
        parent:
          $ref: '#/components/schemas/Category'
        image:
          $ref: '#/components/schemas/Image'
      required:
        - name
        - image
    Field:
      type: object
      properties:
        id:
          type: number
          format: int32
          readOnly: true
        name:
          type: string
        unit:
          type: string
        type:
          enum:
            - TEXT
            - NUMBER
            - DATE
            - BOOLEAN
            - ENUM
      required:
        - name
        - unit
        - type
    CartItem:
      type: object
      properties:
        id:
          type: number
          format: int32
          readOnly: true
        producerProduct:
          $ref: '#/components/schemas/ProducerProduct'
        consumer:
          $ref: '#/components/schemas/Consumer'
        quantity:
          type: number
          format: int32
      required:
        - producerProduct
        - quantity
    ProducerProduct:
      type: object
      properties:
        id:
          type: number
          format: int32
          readOnly: true
        current_price:
          type: number
          format: float
        productionDate:
          type: string
          format: date-time
        stock:
          type: number
          format: int32
        producer:
          $ref: '#/components/schemas/Producer'
        productionUnit:
          $ref: '#/components/schemas/ProductionUnit'
        productSpec:
          $ref: '#/components/schemas/ProductSpec'
        deletedAt:
          type: string
          format: date-time
      required:
        - current_price
        - productionDate
        - stock
    ProductionUnit:
      type: object
      properties:
        id:
          type: number
          format: int32
          readOnly: true
        name:
          type: string
        address:
          $ref: '#/components/schemas/Address'
        producer:
          $ref: '#/components/schemas/Producer'
        images:
          type: array
          items:
            $ref: '#/components/schemas/Image'
        deletedAt:
          type: string
          format: date-time
      required:
        - name
        - address
        - images
    ProductSpec:
      type: object
      properties:
        id:
          type: number
          format: int32
          readOnly: true
        name:
          type: string
        description:
          type: string
        minPrice:
          type: number
          format: float
        maxPrice:
          type: number
          format: float
        producersCount:
          type: number
          format: int32
        images:
          type: array
          items:
            $ref: '#/components/schemas/Image'
        deletedAt:
          type: string
          format: date-time
      required:
        - name
        - description
        - images
    Order:
      type: object
      properties:
        id:
          type: number
          format: int32
          readOnly: true
        consumer:
          $ref: '#/components/schemas/Consumer'
        shippingAddress:
          $ref: '#/components/schemas/Address'
        payment:
          type: string
      required:
        - shippingAddress
        - payment
    OrderItem:
      type: object
      properties:
        order:
          $ref: '#/components/schemas/Order'
        producerProduct:
          $ref: '#/components/schemas/ProducerProduct'
        quantity:
          type: number
          format: int32
        price:
          type: number
          format: float
        shipment:
          $ref: '#/components/schemas/Shipment'
      required:
        - quantity
        - price
    Shipment:
      type: object
      properties:
        id:
          type: number
          format: int32
          readOnly: true
        carrier:
          $ref: '#/components/schemas/Carrier'
    Carrier:
      type: object
      properties:
        id:
          type: number
          format: int32
          readOnly: true
        licensePlate:
          type: string
        productionUnit:
          $ref: '#/components/schemas/ProductionUnit'
        status:
          enum:
            - AVAILABLE
            - UNAVAILABLE
        image:
          $ref: '#/components/schemas/Image'
        deletedAt:
          type: string
          format: date-time
      required:
        - licensePlate
        - status
    ExportAddress:
      type: object
      properties:
        number:
          type: number
        door:
          type: string
        floor:
          type: number
        zipCode:
          type: string
        street:
          type: string
        parish:
          type: string
        county:
          type: string
        city:
          type: string
        district:
          type: string
        latitude:
          type: number
          format: float
        longitude:
          type: number
          format: float
    ExportOrderItem:
      type: object
      properties:
        producerProduct:
          type: object
          properties:
            currentPrice:
              type: number
              format: float
            productionDate:
              type: string
              format: date-time
            producer:
              type: object
              properties:
                name:
                  type: string
                email:
                  type: string
                phone:
                  type: string
            productionUnit:
              type: object
              properties:  
                name:
                  type: string
                address:
                  $ref: '#/components/schemas/ExportAddress'
            productSpec:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
            quantity: 
              type: number
              format: int32
            price:
              type: number
              format: float
            shipment:
              type: object
              properties:
                carrier:
                  type: object
                  properties:
                    licensePlate:
                      type: string
                events:
                  type: array
                  items:
                    type: object
                    properties:
                      date:
                        type: string
                        format: date-time
                      address:
                        $ref: '#/components/schemas/ExportAddress'
                      status:
                        type: object
                        properties:
                          name:
                            type: string
    ExportOrder:
      type: object
      properties:
        id:
          type: number
          format: int32
          readOnly: true
        shippingAddress:
          $ref: '#/components/schemas/ExportAddress'
        generalStatus:
          type: string
        totalPrice:
          type: number
          format: float
        items:
          type: array
          items:
            $ref: '#/components/schemas/ExportOrderItem'
    Notification:
      type: object
      properties:
        id:
          type: number
          format: int32
          readOnly: true
        actor:
          $ref: '#/components/schemas/User'
          description: The user that triggered the notification
        notifier:
          $ref: '#/components/schemas/User'
          description: The user that will receive the notification
        createdAt:
          type: string
          format: date-time
        readAt:
          type: string
          format: date-time
        title:
          type: string
        message:
          type: string
      required:
        - title
        - message
        - createdAt
        - actor
        - notifier
    ProductSpecField:
      type: object
      properties:
        productSpecCategory:
          $ref: '#/components/schemas/ProductSpecCategory'
        field:
          $ref: '#/components/schemas/Field'
        value:
          type: string
      required:
        - value
    ProductSpecCategory:
      type: object
      properties:
        productSpec:
          $ref: '#/components/schemas/ProductSpec'
        category:
          $ref: '#/components/schemas/Category'
    ReportFlashcards:
      type: object
      additionalProperties: true
    ReportMap:
      type: object
      additionalProperties: true
    ReportProducts:
      type: object
      additionalProperties: true
    ReportClients:
      type: object
      additionalProperties: true
    ReportEvolution:
      type: object
      additionalProperties: true
