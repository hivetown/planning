openapi: "3.0.2"
info:
  title: HiveTown
  description: HiveTown API Specification
  termsOfService: http://swagger.io/terms/
  contact:
    email: api@hivetown.pt
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 0.0.1
servers:
  - url: https://api.hivetown.pt
paths:
  /categories:
    get:
      summary: Get all root categories
      description: Get all root categories
      operationId: getCategories
      tags:
        - categories
      parameters:
        - $ref: "#/components/parameters/page"
        - $ref: "#/components/parameters/pageSize"
      responses:
        "200":
          description: The categories
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/BaseItems"
                  - type: object
                    properties:
                      items:
                        type: array
                        items:
                          $ref: "#/components/schemas/CategoryWithParent"
    post:
      security:
        - firebase: []
      summary: Create a category
      description: Create a category
      operationId: createCategory
      tags:
        - categories
      requestBody:
        description: The category to create
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Category"
      responses:
        "201":
          description: The category was created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Category"
        "400":
          description: The category was invalid
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: The user is not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: The user does not have permission to create a category
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /categories/{categoryId}:
    parameters:
      - $ref: "#/components/parameters/categoryId"
    get:
      summary: Get a single category
      description: Get a category
      operationId: getCategory
      tags:
        - categories
      responses:
        "200":
          description: The category
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CategoryWithParent"
        "404":
          description: The category was not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    put:
      security:
        - firebase: []
      summary: Update a category
      description: Update a category
      operationId: updateCategory
      tags:
        - categories
      requestBody:
        description: The category to update
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Category"
      responses:
        "200":
          description: The category was updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CategoryWithParent"
        "400":
          description: The category was invalid
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: The user is not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: The user does not have permission to update a category
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: The category was not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      security:
        - firebase: []
      summary: Delete a category
      description: Delete a category
      operationId: deleteCategory
      tags:
        - categories
      responses:
        "204":
          description: The category was deleted
        "401":
          description: The user is not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: The user does not have permission to delete a category
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: The category was not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /categories/{categoryId}/categories:
    parameters:
      - $ref: "#/components/parameters/categoryId"
    get:
      summary: Get children categories of a category
      description: Get children categories of a category
      operationId: getChildrenCategoriesOfCategory
      tags:
        - categories
      parameters:
        - $ref: "#/components/parameters/page"
        - $ref: "#/components/parameters/pageSize"
      responses:
        "200":
          description: The children categories of the category
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/BaseItems"
                  - type: object
                    properties:
                      items:
                        type: array
                        items:
                          $ref: "#/components/schemas/Category"
        "404":
          description: The category was not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /categories/{categoryId}/fields:
    parameters:
      - $ref: "#/components/parameters/categoryId"
    get:
      summary: Get fields of a category
      description: Get fields of a category
      operationId: getFieldsOfCategory
      tags:
        - categories
      parameters:
        - $ref: "#/components/parameters/page"
        - $ref: "#/components/parameters/pageSize"
      responses:
        "200":
          description: The fields of the category
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/BaseItems"
                  - type: object
                    properties:
                      items:
                        type: array
                        items:
                          $ref: "#/components/schemas/Field"
        "404":
          description: Not Found. The category was not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /categories/{categoryId}/fields/{fieldId}:
    parameters:
      - $ref: "#/components/parameters/categoryId"
      - $ref: "#/components/parameters/fieldId"
    get:
      summary: Get a field of a category
      description: Get a field of a category
      operationId: getFieldOfCategory
      tags:
        - categories
      responses:
        "200":
          description: The field of the category
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Field"
        "404":
          description: Not Found. The category or field were not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    put:
      security:
        - firebase: []
      summary: Add a field to a category
      description: Add a field to a category
      operationId: addFieldToCategory
      tags:
        - categories
      responses:
        "201":
          description: The field was added to the category
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Field"
        "401":
          description: Unauthorized. The user is not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Forbidden. The user does not have permission to add a field to a category
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Not Found. The category or field was not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "409":
          description: Conflict. The field is already in the category
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      security:
        - firebase: []
      summary: Remove a field from a category
      description: Remove a field from a category
      operationId: removeFieldFromCategory
      tags:
        - categories
      responses:
        "204":
          description: The field was removed from the category
        "401":
          description: Unauthorized. The user is not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Forbidden. The user does not have permission to remove a field from a category
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Not Found. The category or field was not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /consumers:
    get:
      security:
        - firebase: []
      summary: Get all consumers
      description: Get all consumers
      operationId: getConsumers
      tags:
        - consumers
      parameters:
        - $ref: "#/components/parameters/page"
        - $ref: "#/components/parameters/pageSize"
      responses:
        "200":
          description: The list of consumers
          content:
            application/json:
              schema:
                type: object
                description: The response for the get consumers endpoint
                allOf:
                  - $ref: "#/components/schemas/BaseItems"
                  - type: object
                    properties:
                      items:
                        type: array
                        items:
                          $ref: "#/components/schemas/Consumer"
        "401":
          description: The user is not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: The user does not have permission to get consumers
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      security:
        - firebase: []
      summary: Create a consumer
      description: Create a consumer
      operationId: createConsumer
      tags:
        - consumers
      requestBody:
        description: The consumer to create
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Consumer"
      responses:
        "201":
          description: The consumer was created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Consumer"
        "400":
          description: The consumer was invalid
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /consumers/{consumerId}:
    parameters:
      - $ref: "#/components/parameters/consumerId"
    get:
      security:
        - firebase: []
      summary: Get a consumer
      description: Get a consumer
      operationId: getConsumer
      tags:
        - consumers
      responses:
        "200":
          description: The consumer
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Consumer"
        "401":
          description: The user is not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: The user does not have permission to get a consumer
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: The consumer was not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    put:
      security:
        - firebase: []
      summary: Update a consumer
      description: Update a consumer
      operationId: updateConsumer
      tags:
        - consumers
      requestBody:
        description: The consumer to update
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Consumer"
      responses:
        "200":
          description: The consumer was updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Consumer"
        "400":
          description: The consumer was invalid
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: The user is not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: The user does not have permission to update a consumer
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: The consumer was not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      security:
        - firebase: []
      summary: Delete a consumer
      description: Delete a consumer
      operationId: deleteConsumer
      tags:
        - consumers
      responses:
        "204":
          description: The consumer was deleted
        "401":
          description: The user is not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: The user does not have permission to delete a consumer
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: The consumer was not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /consumers/{consumerId}/addresses:
    parameters:
      - $ref: "#/components/parameters/consumerId"
    get:
      security:
        - firebase: []
      summary: Get all addresses of a consumer
      description: Get all addresses of a consumer
      operationId: getConsumerAddresses
      tags:
        - consumers
      parameters:
        - $ref: "#/components/parameters/page"
        - $ref: "#/components/parameters/pageSize"
      responses:
        "200":
          description: The list of addresses
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/BaseItems"
                  - type: object
                    properties:
                      items:
                        type: array
                        items:
                          $ref: "#/components/schemas/Address"
        "401":
          description: The user is not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: The user does not have permission to get addresses of a consumer
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: The consumer was not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      security:
        - firebase: []
      summary: Create an address for a consumer
      description: Create an address for a consumer
      operationId: createConsumerAddress
      tags:
        - consumers
      requestBody:
        description: The address to create
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Address"
      responses:
        "201":
          description: The address was created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Address"
        "400":
          description: The address was invalid
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: The user is not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: The user does not have permission to create an address for a consumer
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: The consumer was not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /consumers/{consumerId}/addresses/{addressId}:
    parameters:
      - $ref: "#/components/parameters/consumerId"
      - $ref: "#/components/parameters/addressId"
    get:
      security:
        - firebase: []
      summary: Get an address of a consumer
      description: Get an address of a consumer
      operationId: getConsumerAddress
      tags:
        - consumers
      responses:
        "200":
          description: The address
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Address"
        "401":
          description: The user is not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: The user does not have permission to get an address of a consumer
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: The consumer or address was not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    put:
      security:
        - firebase: []
      summary: Update an address of a consumer
      description: Update an address of a consumer
      operationId: updateConsumerAddress
      tags:
        - consumers
      requestBody:
        description: The address to update
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Address"
      responses:
        "200":
          description: The address was updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Address"
        "400":
          description: The address was invalid
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: The user is not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: The user does not have permission to update an address of a consumer
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: The consumer or address was not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      security:
        - firebase: []
      summary: Delete an address of a consumer
      description: Delete an address of a consumer
      operationId: deleteConsumerAddress
      tags:
        - consumers
      responses:
        "204":
          description: The address was deleted
        "401":
          description: The user is not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: The user does not have permission to delete an address of a consumer
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: The consumer or address was not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /consumers/{consumerId}/cart:
    parameters:
      - $ref: "#/components/parameters/consumerId"
    get:
      security:
        - firebase: []
      summary: Get the cart of a consumer
      description: Get the cart of a consumer
      operationId: getConsumerCart
      tags:
        - consumers
      parameters:
        - $ref: "#/components/parameters/page"
        - $ref: "#/components/parameters/pageSize"
      responses:
        "200":
          description: The cart items
          content:
            application/json:
              schema:
                type: object
                description: The cart items
                allOf:
                  - $ref: "#/components/schemas/BaseItems"
                  - type: object
                    properties:
                      items:
                        type: array
                        items:
                          $ref: "#/components/schemas/CartItemWithProducerProduct"
        "401":
          description: The user is not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: The user does not have permission to get the cart of a consumer
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: The consumer was not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      security:
        - firebase: []
      summary: Add items to the cart of a consumer
      description: Add items to the cart of a consumer
      operationId: addConsumerCartItems
      tags:
        - consumers
      requestBody:
        description: The items to add
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CartItem"
      responses:
        "201":
          description: The item was added to the cart
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CartItem"
        "400":
          description: The item is invalid
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: The user is not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: The user does not have permission to add items to the cart of a consumer
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: The consumer was not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      security:
        - firebase: []
      summary: Clear the cart of a consumer
      description: Clear the cart of a consumer
      operationId: clearConsumerCart
      tags:
        - consumers
      responses:
        "204":
          description: The cart was cleared
        "401":
          description: The user is not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: The user does not have permission to delete the cart of a consumer
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: The consumer was not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /consumers/{consumerId}/cart/{producerProductId}:
    parameters:
      - $ref: "#/components/parameters/consumerId"
      - $ref: "#/components/parameters/producerProductId"
    put:
      security:
        - firebase: []
      summary: Update an item in the cart of a consumer
      description: Update an item in the cart of a consumer
      operationId: updateConsumerCartItem
      tags:
        - consumers
      requestBody:
        description: The item to update
        required: true
        content:
          application/json:
            schema:
              type: object
              description: The item to update to
              properties:
                quantity:
                  type: integer
                  description: The quantity of the item
                  example: 19
      responses:
        "200":
          description: The item was updated in the cart
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CartItemWithProducerProduct"
        "204":
          description: The item had no changes
        "400":
          description: The item was invalid
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: The user is not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: The user does not have permission to update an item in the cart of a consumer
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: The consumer or item was not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /consumers/{consumerId}/orders:
    parameters:
      - $ref: "#/components/parameters/consumerId"
    get:
      security:
        - firebase: []
      summary: Get all orders of a consumer
      description: Get all orders of a consumer
      operationId: getConsumerOrders
      tags:
        - consumers
      parameters:
        - $ref: "#/components/parameters/page"
        - $ref: "#/components/parameters/pageSize"
      responses:
        "200":
          description: The list of orders
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/BaseItems"
                  - type: object
                    properties:
                      items:
                        type: array
                        items:
                          $ref: "#/components/schemas/Order"
        "401":
          description: The user is not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: The user does not have permission to get orders of a consumer
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: The consumer was not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      security:
        - firebase: []
      summary: Create a consumer order
      description: TODO CONFIRMAR
      operationId: createConsumerOrder
      tags:
        - consumers
      responses:
        "201":
          description: The order was created
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Order"
        "400":
          description: The cart is empty, therefor no order can be created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: The user is not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: The user does not have permission to create an order for a consumer
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: The consumer was not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /consumers/{consumerId}/orders/{orderId}:
    parameters:
      - $ref: '#/components/parameters/consumerId'
      - $ref: '#/components/parameters/orderId'
    get:
      security:
        - firebase: []
      summary: Get an order of a consumer
      description: Get an order of a consumer
      operationId: getConsumerOrder
      tags:
        - consumers
      responses:
        '200':
          description: The order
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '401':
          description: The user is not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: The user does not have permission to get an order of a consumer
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: The consumer or order was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      security:
        - firebase: []
      summary: Delete (cancel) an order of a consumer
      description: Can only be done if none of the items in the order have been shipped
      operationId: deleteConsumerOrder
      tags:
        - consumers
      responses:
        '204':
          description: The order was deleted
        '400':
          description: The order is already shipped
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: The user is not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: The user does not have permission to delete an order of a consumer
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: The consumer or order was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /consumers/{consumerId}/orders/{orderId}/items:
    parameters:
      - $ref: '#/components/parameters/consumerId'
      - $ref: '#/components/parameters/orderId'
    get:
      security:
        - firebase: []
      summary: Get all items of an order of a consumer
      description: Get all items of an order of a consumer
      operationId: getOrderItemsOfConsumer
      tags:
        - consumers
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/pageSize'
      responses:
        '200':
          description: The order items
          content:
            application/json:
              schema:
                allOf: 
                  -  $ref: "#/components/schemas/BaseItems"
                  - type: object
                    properties:
                      items:
                        type: array
                        items:
                          $ref: '#/components/schemas/OrderItemWithProducerProductAndShipmentCurrentStatus'
        '401':
          description: The user is not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: The user does not have permission to get order items of a consumer
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: The consumer or order was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /consumers/{consumerId}/orders/{orderId}/items/{producerProductId}:
    parameters:
      - $ref: '#/components/parameters/consumerId'
      - $ref: '#/components/parameters/orderId'
      - $ref: '#/components/parameters/producerProductId'
    get:
      security:
        - firebase: []
      summary: Get an order item of an order of a consumer
      description: Get an order item of an order of a consumer
      operationId: getOrderItemOfConsumer
      tags:
        - consumers
      responses:
        '200':
          description: The order item
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderItemWithProducerProduct'
        '401':
          description: The user is not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: The user does not have permission to get an order item of a consumer
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: The consumer, order, or order item was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      security:
        - firebase: []
      summary: Delete (cancel) an order item of an order of a consumer
      description: Can only be done if the order item is not yet shipped
      operationId: deleteOrderItemOfConsumer
      tags:
        - consumers
      responses:
        '204':
          description: The order item was deleted
        '401':
          description: The user is not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: The user does not have permission to delete an order item of a consumer
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: The consumer, order or order item was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  
components:
  securitySchemes:
    firebase:
      type: http
      scheme: bearer
      bearerFormat: JWT
  parameters:
    # PATH PARAMETERS
    categoryId:
      description: The category id
      name: categoryId
      in: path
      required: true
      schema:
        description: The category id
        type: integer
        format: int32
        example: 1
        minimum: 1
    fieldId:
      description: The field id
      name: fieldId
      in: path
      required: true
      schema:
        description: The field id
        type: integer
        format: int32
        example: 1
        minimum: 1
    consumerId:
      description: The consumer id
      name: consumerId
      in: path
      required: true
      schema:
        description: The consumer id
        type: integer
        format: int32
        example: 1
        minimum: 1
    addressId:
      description: The address id
      name: addressId
      in: path
      required: true
      schema:
        description: The address id
        type: integer
        format: int32
        example: 1
        minimum: 1
    producerProductId:
      description: The producer product id
      name: producerProductId
      in: path
      required: true
      schema:
        description: The producer product id
        type: integer
        format: int32
        example: 1
        minimum: 1
    orderId:
      description: The order id
      name: orderId
      in: path
      required: true
      schema:
        description: The order id
        type: integer
        format: int32
        example: 1
        minimum: 1
    # QUERY PARAMETERS
    page:
      name: page
      in: query
      description: Page number
      required: false
      schema:
        type: integer
        format: int32
        example: 1
        minimum: 1
        maximum: 100
    pageSize:
      name: pageSize
      in: query
      description: Page size
      required: false
      schema:
        type: integer
        format: int32
        example: 50
        minimum: 1
        maximum: 100
    fields:
      name: fields
      in: query
      description: "Filtering by fields."
      required: false
      style: deepObject
      allowReserved: true
      schema:
        type: object
        additionalProperties:
          type: array
          items:
            type: string
        example:
          14: ["female", "male"]
          15: ["red"]

  schemas:
    BaseItems:
      description: The base items response. All items responses should extend this and override the items property.
      type: object
      properties:
        page:
          description: The page number
          type: integer
          format: int32
          example: 1
          minimum: 1
        pageSize:
          description: The page size (number of items per page)
          type: integer
          format: int32
          minimum: 1
          maximum: 100
          example: 100
        items:
          description: List of items. Must be overridden in the extended schema.
          type: array
          minItems: 0
          maxItems: 100
          items:
            type: object
        totalItems:
          description: The total number of items in the collection
          type: integer
          format: int32
          example: 1673
        totalPages:
          description: The total number of pages in the collection
          type: integer
          format: int32
          example: 17
      required:
        - page
        - pageSize
        - items
        - totalItems
        - totalPages
    Error:
      description: An error
      type: object
      properties:
        statusCode:
          description: The HTTP status code
          type: integer
          format: int32
        message:
          description: The error message
          type: string
    Image:
      description: An image
      type: object
      properties:
        id:
          readOnly: true
          type: integer
          format: int32
        name:
          type: string
          example: Dog
        url:
          type: string
          format: uri
          example: https://loremflickr.com/320/240/dog
        alt:
          type: string
          example: A dog doing dog things
    Category:
      description: A category
      type: object
      properties:
        id:
          description: The category ID
          readOnly: true
          type: integer
          format: int32
        name:
          description: The category name
          type: string
          example: Smartphone
        image:
          description: The category image
          $ref: "#/components/schemas/Image"
          type: string
        parent:
          description: The parent category, if any
          type: integer
          format: int32
    CategoryWithParent:
      allOf:
        - $ref: "#/components/schemas/Category"
        - type: object
          properties:
            parent:
              description: The parent category, if any
              $ref: "#/components/schemas/Category"
    Field:
      description: A field
      type: object
      properties:
        id:
          description: The field ID
          readOnly: true
          type: integer
          format: int32
        name:
          description: The field name
          type: string
          example: Screen size
        unit:
          description: The field unit
          type: string
          example: inches
        type:
          description: The field type
          type: string
          enum: [TEXT, INTEGER, FLOAT, BOOLEAN, DATE]
          example: FLOAT
      required:
        - name
        - unit
        - type
    User:
      description: A user
      type: object
      properties:
        id:
          description: The user ID
          readOnly: true
          type: integer
          format: int32
          example: 1
        name:
          description: The user name
          type: string
          example: Twix Cão Malinois
        type:
          description: The user type
          type: string
          enum: [CONSUMER, PRODUCER]
          example: CONSUMER
        email:
          description: The user email
          type: string
          example: twix_malinois@waffles.pt
        phone:
          description: The user phone
          type: string
          example: +351 912 345 678
        vat:
          description: The user VAT number
          type: integer
          format: int32
          example: 123456789
        image:
          description: The user image
          $ref: "#/components/schemas/Image"
      required:
        - name
        - email
        - phone
        - vat
    Consumer:
      description: A consumer
      allOf:
        - $ref: "#/components/schemas/User"
        - type: object
          properties:
            type:
              description: The user type
              type: string
              enum: [CONSUMER]
              example: CONSUMER
    Producer:
      description: A producer
      allOf:
        - $ref: "#/components/schemas/User"
        - type: object
          properties:
            type:
              description: The user type
              type: string
              enum: [PRODUCER]
              example: PRODUCER
    Address:
      description: An address
      type: object
      properties:
        id:
          description: The address ID
          readOnly: true
          type: integer
          format: int32
          example: 1
        number:
          description: The number
          type: integer
          format: int32
          example: 1
        door:
          description: The door
          type: string
          example: A
        floor:
          description: The floor
          type: integer
          format: int32
          example: 1
        street:
          description: The street
          type: string
          example: Rua da Alegria
        zipCode:
          description: The zip code
          type: string
          example: 1234-567
        parish:
          description: The parish
          type: string
          example: Parque das Nações
        county:
          description: The county
          type: string
          example: Lisboa
        city:
          description: The city
          type: string
          example: Lisboa
        district:
          description: The district
          type: string
          example: Lisboa
        longitude:
          description: The longitude
          type: number
          format: float
          example: 38.7222524
        latitude:
          description: The latitude
          type: number
          format: float
          example: -9.1393366
    CartItem:
      description: A cart item
      type: object
      properties:
        producerProduct:
          description: The product ID
          type: integer
          format: int32
          example: 1
        consumer:
          description: The consumer ID
          type: integer
          format: int32
          example: 1
        quantity:
          description: The quantity
          type: integer
          format: int32
          example: 1
      required:
        - producerProduct
        - consumer
        - quantity
    CartItemWithProducerProduct:
      allOf:
        - $ref: "#/components/schemas/CartItem"
        - type: object
          properties:
            producerProduct:
              description: The product
              $ref: "#/components/schemas/ProducerProductWithProductSpecAndProductionUnit"
    ProducerProduct:
      description: A producer product
      type: object
      properties:
        id:
          description: The product ID
          readOnly: true
          type: integer
          format: int32
          example: 1
        currentPrice:
          description: The product price
          type: number
          format: float
          example: 999.99
        stock:
          description: The product stock
          type: integer
          format: int32
          example: 10
        productionDate:
          description: The production date
          type: string
          format: date-time
          example: 2020-01-01T00:00:00Z
        producer:
          description: The producer ID
          type: integer
          format: int32
          example: 1
        productionUnit:
          description: The production unit ID
          type: integer
          format: int32
          example: 1
        productSpec:
          description: The product specification ID
          type: integer
          format: int32
          example: 1
      required:
        - currentPrice
        - stock
        - productionDate
        - producer
        - productionUnit
        - productSpec
    ProducerProductWithProductSpec:
      allOf:
        - $ref: "#/components/schemas/ProducerProduct"
        - type: object
          properties:
            productSpec:
              description: The product specification
              $ref: "#/components/schemas/ProductSpec"
    ProducerProductWithProductSpecAndProductionUnit:
      allOf:
        - $ref: "#/components/schemas/ProducerProductWithProductSpec"
        - type: object
          properties:
            productionUnit:
              description: The production unit
              $ref: "#/components/schemas/ProductionUnit"
    ProductSpec:
      description: A product specification
      type: object
      properties:
        id:
          description: The product specification ID
          readOnly: true
          type: integer
          format: int32
          example: 1
        name:
          description: The product specification name
          type: string
          example: iPhone 14 Pro Max
        description:
          description: The product specification description
          type: string
          example: The iPhone 14 Pro Max is the most powerful and advanced iPhone ever
        images:
          description: The product specification images
          type: array
          items:
            $ref: "#/components/schemas/Image"
      required:
        - name
        - description
        - images
    ProductionUnit:
      description: A production unit
      type: object
      properties:
        id:
          description: The production unit ID
          readOnly: true
          type: integer
          format: int32
          example: 1
        name:
          description: The production unit name
          type: string
          example: Apple Store
        address:
          description: The production unit address
          $ref: "#/components/schemas/Address"
        producer:
          description: The producer ID
          type: integer
          format: int32
          example: 1
        images:
          description: The production unit images
          type: array
          items:
            $ref: "#/components/schemas/Image"
      required:
        - name
        - address
        - producer
        - images
    Order:
      description: An order
      type: object
      properties:
        id:
          description: The order ID
          readOnly: true
          type: integer
          format: int32
          example: 1
        consumer:
          description: The consumer ID
          type: integer
          format: int32
          example: 1
        shippingAddress:
          description: The delivery address
          $ref: "#/components/schemas/Address"
      required:
        - consumer
        - shippingAddress
    OrderItem:
      description: An order item
      type: object
      properties:
        order:
          description: The order ID
          type: integer
          format: int32
          example: 1
        producerProduct:
          description: The product ID
          type: integer
          format: int32
          example: 1
        quantity:
          description: The quantity
          type: integer
          format: int32
          example: 1
        price:
          description: The price at the time of purchase
          type: number
          format: float
          example: 999.99
        shipment:
          description: The shipment ID
          type: integer
          format: int32
          example: 1
      required:
        - order
        - producerProduct
        - quantity
        - price
    OrderItemWithProducerProduct:
      allOf:
        - $ref: "#/components/schemas/OrderItem"
        - type: object
          properties:
            producerProduct:
              description: The product
              $ref: "#/components/schemas/ProducerProductWithProductSpecAndProductionUnit"
    OrderItemWithProducerProductAndShipmentCurrentStatus:
      allOf:
        - $ref: "#/components/schemas/OrderItemWithProducerProduct"
        - type: object
          properties:
            shipment:
              description: The shipment
              $ref: "#/components/schemas/ShipmentWithCurrentStatus"
    Shipment:
      description: A shipment
      type: object
      properties:
        id:
          description: The shipment ID
          readOnly: true
          type: integer
          format: int32
          example: 1
        carrier:
          description: The courier ID
          type: integer
          format: int32
          example: 1
        currentStatus:
          description: The current status
          $ref: "#/components/schemas/ShipmentStatus"
        currentStatusDate:
          description: The current status date
          type: string
          format: date-time
          example: 2020-01-01T00:00:00Z
      required:
        - orderItem
        - courier
        - currentStatus
        - currentStatusDate