# TODO
#  show created and updated dates?
openapi: '3.0.2'
info:
  title: OLANOME REST API
  description: OLANOME API Schema blablalabaabalbablbabba
  termsOfService: http://swagger.io/terms/
  contact:
    email: api@OLANOME.pt
  # TODO rever licen√ßa
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 0.0.1
servers:
  - url: https://api.server.test/v1
paths:
  # TODO should /products return productspec?
  # TODO oauth
  /products:
    get:
      summary: Get all products
      description: Get all products
      operationId: getProducts
      tags:
        - products
      parameters:
        - name: page
          in: query
          description: Page number
          required: false
          schema:
            type: integer
            format: int32
        - name: limit
          in: query
          description: Number of items per page
          required: false
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      # TODO check how to auth
      summary: Create a product
      description: Create a product
      operationId: createProduct
      tags:
        - products
      requestBody:
        description: Product object that needs to be added
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /products/{productId}:
    get:
      summary: Get a product
      description: Get a product
      operationId: getProduct
      tags:
        - products
      parameters:
        - name: productId
          in: path
          description: Product ID
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Update a product
      description: Update a product
      operationId: updateProduct
      tags:
        - products
      parameters:
        - name: productId
          in: path
          description: Product ID
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Product object that needs to be updated
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Not Found
    delete:
      summary: Delete a product
      description: Delete a product
      operationId: deleteProduct
      tags:
        - products
      parameters:
        - name: productId
          in: path
          description: Product ID
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: No Content
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /users:
    get:
      summary: Get all users
      description: Get all users
      operationId: getUsers
      tags:
        - users
      parameters:
        - name: page
          in: query
          description: Page number
          required: false
          schema:
            type: integer
            format: int32
        - name: limit
          in: query
          description: Number of items per page
          required: false
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Create a user
      description: Create a user
      operationId: createUser
      tags:
        - users
      requestBody:
        description: User object that needs to be added
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /users/{userId}:
    get:
      summary: Get a user
      description: Get a user
      operationId: getUser
      tags:
        - users
      parameters:
        - name: userId
          in: path
          description: User ID
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Update a user
      description: Update a user
      operationId: updateUser
      tags:
        - users
      parameters:
        - name: userId
          in: path
          description: User ID
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: User object that needs to be updated
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Not Found
    delete:
      summary: Delete a user
      description: Delete a user
      operationId: deleteUser
      tags:
        - users
      parameters:
        - name: userId
          in: path
          description: User ID
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: No Content
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /users/{userId}/addresses:
    get:
      summary: Get all addresses of a user
      description: Get all addresses of a user
      operationId: getUserAddresses
      tags:
        - users
      parameters:
        - name: userId
          in: path
          description: User ID
          required: true
          schema:
            type: integer
            format: int64
        - name: page
          in: query
          description: Page number
          required: false
          schema:
            type: integer
            format: int32
        - name: limit
          in: query
          description: Number of items per page
          required: false
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Address'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Create an address for a user
      description: Create an address for a user
      operationId: createUserAddress
      tags:
        - users
      parameters:
        - name: userId
          in: path
          description: User ID
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Address object that needs to be added
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Address'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Address'
  /users/{userId}/addresses/{addressId}:
    get:
      summary: Get an address of a user
      description: Get an address of a user
      operationId: getUserAddress
      tags:
        - users
      parameters:
        - name: userId
          in: path
          description: User ID
          required: true
          schema:
            type: integer
            format: int64
        - name: addressId
          in: path
          description: Address ID
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Address'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Update an address of a user
      description: Update an address of a user
      operationId: updateUserAddress
      tags:
        - users
      parameters:
        - name: userId
          in: path
          description: User ID
          required: true
          schema:
            type: integer
            format: int64
        - name: addressId
          in: path
          description: Address ID
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Address object that needs to be updated
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Address'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Address'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
# TODO check on what's exposed
    delete:
      summary: Delete an address of a user
      description: Delete an address of a user
      operationId: deleteUserAddress
      tags:
        - users
      parameters:
        - name: userId
          in: path
          description: User ID
          required: true
          schema:
            type: integer
            format: int64
        - name: addressId
          in: path
          description: Address ID
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: No Content
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /users/{userId}/orders:
    get:
      summary: Get all orders of a user
      description: Get all orders of a user
      operationId: getUserOrders
      tags:
        - users
      parameters:
        - name: userId
          in: path
          description: User ID
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /coupons:
    get:
      summary: Get all coupons
      description: Get all coupons
      operationId: getCoupons
      tags:
        - coupons
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Coupon'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Create a coupon
      description: Create a coupon
      operationId: createCoupon
      tags:
        - coupons
      requestBody:
        description: Coupon object that needs to be created
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Coupon'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Coupon'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /coupons/{couponId}:
    get:
      summary: Get a coupon
      description: Get a coupon
      operationId: getCoupon
      tags:
        - coupons
      parameters:
        - name: couponId
          in: path
          description: Coupon ID
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Coupon'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Update a coupon
      description: Update a coupon
      operationId: updateCoupon
      tags:
        - coupons
      parameters:
        - name: couponId
          in: path
          description: Coupon ID
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Coupon object that needs to be updated
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Coupon'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Coupon'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete a coupon
      description: Delete a coupon
      operationId: deleteCoupon
      tags:
        - coupons
      parameters:
        - name: couponId
          in: path
          description: Coupon ID
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: No Content
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /categories:
    get:
      summary: Get all categories
      description: Get all categories
      operationId: getCategories
      tags:
        - categories
      parameters:
        - name: page
          in: query
          description: Page number
          required: false
          schema:
            type: integer
            format: int64
        - name: limit
          in: query
          description: Number of items per page
          required: false
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Category'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Create a category
      description: Create a category
      operationId: createCategory
      tags:
        - categories
      requestBody:
        description: Category object that needs to be created
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Category'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /categories/{categoryId}:
    get:
      summary: Get a category
      description: Get a category
      operationId: getCategory
      tags:
        - categories
      parameters:
        - name: categoryId
          in: path
          description: Category ID
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Update a category
      description: Update a category
      operationId: updateCategory
      tags:
        - categories
      parameters:
        - name: categoryId
          in: path
          description: Category ID
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Category object that needs to be updated
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Category'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
components:
  schemas:
    Error:
      type: object
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
    Address:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 9
        street:
          type: string
          example: Rua da Liberdade
        number:
          type: string
          example: 51
        zip:
          type: string
          example: 2520-125
        parish:
          type: string
          example: Ferrel
        county:
          type: string
          example: Peniche
        city:
          type: string
          example: Peniche
        district:
          type: string
          example: Leiria
        country:
          type: string
          example: Portugal
        latitude:
          type: number
          format: float
          example: 39.363598
        longitude:
          type: number
          format: float
          example: -9.323305
        createdAt:
          type: string
          format: date-time
          example: 2019-10-10T10:10:10.000Z
        updatedAt:
          type: string
          format: date-time
          example: 2019-10-10T10:10:10.000Z
    User: 
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 8
        name:
          type: string
          example: Ib√©ria
        email:
          type: string
          example: iberia@sapo.pt
        vat:
          type: string
          example: 234567890
        level:
          type: integer
          example: 0
        createdAt:
          type: string
          format: date-time
          example: 2019-10-10T10:10:10.000Z
        updatedAt:
          type: string
          format: date-time
          example: 2019-10-10T10:10:10.000Z
        addresses?:
          type: array
          items:
            type: object
            $ref: '#/components/schemas/UserAddress'
        orders?:
          type: array
          items:
            type: object
            $ref: '#/components/schemas/Order'
    UserAddress:
      type: object
      properties:
        userId: 
          type: integer
          format: int64
          example: 8
        addressId: 
          type: integer
          format: int64
          example: 9
        address?:
          type: object
          $ref: '#/components/schemas/Address'
    Order:
      type: object
      properties:
        consumerId: 
          type: integer 
          format: int64
          example: 8
        id: 
          type: integer
          format: int64
          example: 9
        totalPaid:
          type: number
          format: float
          example: 10.99
        couponId:
          type: integer
          format: int64
          example: 1
        createdAt:
          type: string
          format: date-time
          example: 2019-10-10T10:10:10.000Z
        updatedAt:
          type: string
          format: date-time
          example: 2019-10-10T10:10:10.000Z
        consumer?:
          type: object
          $ref: '#/components/schemas/User'
        coupon?:
          type: object
          $ref: '#/components/schemas/Coupon'
        orderItems?:
          type: array
          items:
            type: object
            $ref: '#/components/schemas/OrderItem'
    Coupon:
      type: object
      properties:
        id: 
          type: integer
          format: int64
          example: 1
        code: 
          type: string
          example: 1234567890
        discount: 
          type: number
          format: float
          example: 10.99
        createdAt:
          type: string
          format: date-time
          example: 2019-10-10T10:10:10.000Z
        updatedAt:
          type: string
          format: date-time
          example: 2019-10-10T10:10:10.000Z
    OrderItem:
      type: object
      properties:
        orderId: 
          type: integer
          format: int64
          example: 9
        productId: 
          type: integer
          format: int64
          example: 1
        quantity: 
          type: integer
          example: 1
        order?:
          type: object
          $ref: '#/components/schemas/Order'
        product?:
          type: object
          $ref: '#/components/schemas/Product'
    Product:
      type: object
      properties:
        id: 
          type: integer
          format: int64
          example: 1
        producerId: 
          type: integer
          format: int64
          example: 2
        productSpecificationId: 
          type: integer
          format: int64
          example: 3
        price:
          type: number
          format: float
          example: 10.99
        productionDate:
          type: string
          format: date-time
          example: 2019-10-10T10:10:10.000Z
        createdAt:
          type: string
          format: date-time
          example: 2019-10-10T10:10:10.000Z
        updatedAt:
          type: string
          format: date-time
          example: 2019-10-10T10:10:10.000Z
        producer?:
          type: object
          $ref: '#/components/schemas/User'
        productSpecification?:
          type: object
          $ref: '#/components/schemas/ProductSpecification'
    ProductSpecification:
      type: object
      properties:
        id: 
          type: integer
          format: int64
          example: 3
        name: 
          type: string
          example: Ma√ß√£
        description: 
          type: string
          example: Ma√ß√£s vermelhas
        basePrice:
          type: number
          format: float
          example: 10.99
        # TODO unit?
        # unit:
        #   type: string
        #   example: Kg
        createdAt:
          type: string
          format: date-time
          example: 2019-10-10T10:10:10.000Z
        updatedAt:
          type: string
          format: date-time
          example: 2019-10-10T10:10:10.000Z
    ProductSpecificationCategory:
      type: object
      properties:
        productSpecificationId: 
          type: integer
          format: int64
          example: 3
        categoryId: 
          type: integer
          format: int64
          example: 1
        productSpecification?:
          type: object
          $ref: '#/components/schemas/ProductSpecification'
        category?:
          type: object
          $ref: '#/components/schemas/Category'
    ProductSpecificationCategoryValue:
      type: object
      properties:
        productSpecificationId: 
          type: integer
          format: int64
          example: 3
        fieldId: 
          type: integer
          format: int64
          example: 1
        value:
          type: string
          example: Vermelho
        productSpecification?:
          type: object
          $ref: '#/components/schemas/ProductSpecification'
        field?:
          type: object
          $ref: '#/components/schemas/Field'
    Category:
      type: object
      properties:
        id: 
          type: integer
          format: int64
          example: 1
        name: 
          type: string
          example: Fruta
        parentCategoryId: 
          type: integer
          format: int64
          example: 2
        createdAt:
          type: string
          format: date-time
          example: 2019-10-10T10:10:10.000Z
        updatedAt:
          type: string
          format: date-time
          example: 2019-10-10T10:10:10.000Z
        parentCategory?:
          type: object
          $ref: '#/components/schemas/Category'
    FieldType:
      type: string
      enum:
        - text
        - number
        - date
        - boolean
        - enum
    Field:
      type: object
      properties:
        id: 
          type: integer
          format: int64
          example: 1
        name: 
          type: string
          example: Cor
        type: 
          $ref: '#/components/schemas/FieldType'
        createdAt:
          type: string
          format: date-time
          example: 2019-10-10T10:10:10.000Z
        updatedAt:
          type: string
          format: date-time
          example: 2019-10-10T10:10:10.000Z
    CategoryField:
      type: object
      properties:
        categoryId: 
          type: integer
          format: int64
          example: 1
        fieldId: 
          type: integer
          format: int64
          example: 2
        category?:
          type: object
          $ref: '#/components/schemas/Category'
        field?:
          type: object
          $ref: '#/components/schemas/Field'
    FieldPossibleValue:
      type: object
      properties:
        fieldId: 
          type: integer
          format: int64
          example: 1
        value: 
          type: string
          example: Vermelho
        field?:
          type: object
          $ref: '#/components/schemas/Field'
        # TODO deleted at?
