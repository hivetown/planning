# TODO
#  components (schemas) that are missing
#  show created and updated dates?
#  allow carrier to create a new shipment
#  shipment details
openapi: '3.0.2'
info:
  title: OLANOME REST API
  description: OLANOME API Schema blablalabaabalbablbabba
  termsOfService: http://swagger.io/terms/
  contact:
    email: api@OLANOME.pt
  # TODO rever licen√ßa
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 0.0.1
servers:
  - url: https://api.server.test/v1
paths:
  # TODO should /products return ProductSpec[]?
  # TODO oauth
  /products:
    get:
      summary: Get all products
      description: Get all products
      operationId: getProductss
      tags:
        - products
      parameters:
        - name: page
          in: query
          description: Page number
          required: false
          schema:
            type: integer
            format: int32
        - name: limit
          in: query
          description: Number of items per page
          required: false
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      # TODO check how to auth
      summary: Create a product
      description: Create a product
      operationId: createProduct
      tags:
        - products
      requestBody:
        description: Product object that needs to be added
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /products/{productId}:
    get:
      summary: Get a product
      description: Get a product
      operationId: getProduct
      tags:
        - products
      parameters:
        - name: productId
          in: path
          description: Product ID
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Update a product
      description: Update a product
      operationId: updateProduct
      tags:
        - products
      parameters:
        - name: productId
          in: path
          description: Product ID
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Product object that needs to be updated
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Not Found
    delete:
      summary: Delete a product
      description: Delete a product
      operationId: deleteProduct
      tags:
        - products
      parameters:
        - name: productId
          in: path
          description: Product ID
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: No Content
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /products/{productId}/categories:
    get:
      summary: Get categories of a product
      description: Get categories of a product
      operationId: getProductCategories
      tags:
        - products
      parameters:
        - name: productId
          in: path
          description: Product ID
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Category'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /products/{productId}/categories/{categoryId}:
    get:
      summary: Get a category of a product
      description: Get a category of a product
      operationId: getProductCategory
      tags:
        - products
      parameters:
        - name: productId
          in: path
          description: Product ID
          required: true
          schema:
            type: integer
            format: int64
        - name: categoryId
          in: path
          description: Category ID
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Add a category to a product
      description: Add a category to a product
      operationId: addProductCategory
      tags:
        - products
      parameters:
        - name: productId
          in: path
          description: Product ID
          required: true
          schema:
            type: integer
            format: int64
        - name: categoryId
          in: path
          description: Category ID
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '201':
          description: The category was added to the product
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        '204':
          description: The category was added already on the product
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Remove a category from a product
      description: Remove a category from a product
      operationId: removeProductCategory
      tags:
        - products
      parameters:
        - name: productId
          in: path
          description: Product ID
          required: true
          schema:
            type: integer
            format: int64
        - name: categoryId
          in: path
          description: Category ID
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: No Content
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /products/{productId}/categories/{categoryId}/fields:
    get:
      summary: Get fields of a category of a product
      description: Get fields of a category of a product
      operationId: getProductCategoryFields
      tags:
        - products
      parameters:
        - name: productId
          in: path
          description: Product ID
          required: true
          schema:
            type: integer
            format: int64
        - name: categoryId
          in: path
          description: Category ID
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Field'
                  # TODO add field values to this endpoint
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /products/{productId}/categories/{categoryId}/fields/{fieldId}:
    get:
      summary: Get a field of a category of a product
      description: Get a field of a category of a product
      operationId: getProductCategoryField
      tags:
        - products
      parameters:
        - name: productId
          in: path
          description: Product ID
          required: true
          schema:
            type: integer
            format: int64
        - name: categoryId
          in: path
          description: Category ID
          required: true
          schema:
            type: integer
            format: int64
        - name: fieldId
          in: path
          description: Field ID
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Field'
                # TODO add field value to this endpoint
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Add a field to a category of a product
      description: Add a field to a category of a product
      operationId: addProductCategoryField
      tags:
        - products
      parameters:
        - name: productId
          in: path
          description: Product ID
          required: true
          schema:
            type: integer
            format: int64
        - name: categoryId
          in: path
          description: Category ID
          required: true
          schema:
            type: integer
            format: int64
        - name: fieldId
          in: path
          description: Field ID
          required: true
          schema:
            type: integer
            format: int
      responses:
        '201':
          description: The field was added to the category of the product
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Field'
                # TODO add field value to this endpoint
        '204':
          description: The field was already on the category of the product
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Remove a field from a category of a product
      description: Remove a field from a category of a product
      operationId: removeProductCategoryField
      tags:
        - products
      parameters:
        - name: productId
          in: path
          description: Product ID
          required: true
          schema:
            type: integer
            format: int64
        - name: categoryId
          in: path
          description: Category ID
          required: true
          schema:
            type: integer
            format: int64
        - name: fieldId
          in: path
          description: Field ID
          required: true
          schema:
            type: integer
            format: int
      responses:
        '204':
          description: The field was removed from the category of the product
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /products/{productId}/categories/{categoryId}/fields/{fieldId}/value:
    put:
      summary: Set the value of a field of a category of a product
      description: Set the value of a field of a category of a product
      operationId: setProductCategoryFieldValue
      tags:
        - products
      parameters:
        - name: productId
          in: path
          description: Product ID
          required: true
          schema:
            type: integer
            format: int64
        - name: categoryId
          in: path
          description: Category ID
          required: true
          schema:
            type: integer
            format: int64
        - name: fieldId
          in: path
          description: Field ID
          required: true
          schema:
            type: integer
            format: int
      requestBody:
        description: The value of the field
        required: true
        content:
          application/json:
            schema:
              type: string
      responses:
        '201':
          description: The value of the field was set
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Field'
                # TODO add field value to this endpoint
        '204':
          description: The value of the field was equal to the value sent
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /consumers:
    get:
      summary: Get all Consumers
      description: Get all Consumers
      operationId: getConsumers
      tags:
        - consumers
      parameters:
        - name: page
          in: query
          description: Page number
          required: false
          schema:
            type: integer
            format: int32
        - name: limit
          in: query
          description: Number of items per page
          required: false
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Consumer'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Create a consumer
      description: Create a consumer
      operationId: createConsumer
      tags:
        - consumers
      requestBody:
        description: Consumer object that needs to be added
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Consumer'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Consumer'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /consumers/{consumerId}:
    get:
      summary: Get a consumer
      description: Get a consumer
      operationId: getConsumer
      tags:
        - consumers
      parameters:
        - name: consumerId
          in: path
          description: Consumer ID
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Consumer'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Update a consumer
      description: Update a consumer
      operationId: updateConsumer
      tags:
        - consumers
      parameters:
        - name: consumerId
          in: path
          description: Consumer ID
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Consumer object that needs to be updated
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Consumer'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Consumer'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Not Found
    delete:
      summary: Delete a consumer
      description: Delete a consumer
      operationId: deleteConsumer
      tags:
        - consumers
      parameters:
        - name: consumerId
          in: path
          description: Consumer ID
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: No Content
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /consumers/{consumerId}/addresses:
    get:
      summary: Get all addresses of a consumer
      description: Get all addresses of a consumer
      operationId: getConsumerAddresses
      tags:
        - consumers
      parameters:
        - name: consumerId
          in: path
          description: Consumer ID
          required: true
          schema:
            type: integer
            format: int64
        - name: page
          in: query
          description: Page number
          required: false
          schema:
            type: integer
            format: int32
        - name: limit
          in: query
          description: Number of items per page
          required: false
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Address'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Create an address for a consumer
      description: Create an address for a consumer
      operationId: createConsumerAddress
      tags:
        - consumers
      parameters:
        - name: consumerId
          in: path
          description: Consumer ID
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Address object that needs to be added
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Address'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Address'
  /consumers/{consumerId}/addresses/{addressId}:
    get:
      summary: Get an address of a consumer
      description: Get an address of a consumer
      operationId: getConsumerAddress
      tags:
        - consumers
      parameters:
        - name: consumerId
          in: path
          description: Consumer ID
          required: true
          schema:
            type: integer
            format: int64
        - name: addressId
          in: path
          description: Address ID
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Address'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Update an address of a consumer
      description: Update an address of a consumer
      operationId: updateConsumerAddress
      tags:
        - consumers
      parameters:
        - name: consumerId
          in: path
          description: Consumer ID
          required: true
          schema:
            type: integer
            format: int64
        - name: addressId
          in: path
          description: Address ID
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Address object that needs to be updated
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Address'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Address'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
# TODO check on what's exposed
    delete:
      summary: Delete an address of a consumer
      description: Delete an address of a consumer
      operationId: deleteConsumerAddress
      tags:
        - consumers
      parameters:
        - name: consumerId
          in: path
          description: Consumer ID
          required: true
          schema:
            type: integer
            format: int64
        - name: addressId
          in: path
          description: Address ID
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: No Content
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /consumers/{consumerId}/orders:
    get:
      summary: Get all orders of a consumer
      description: Get all orders of a consumer
      operationId: getConsumerOrders
      tags:
        - consumers
      parameters:
        - name: consumerId
          in: path
          description: Consumer ID
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Create an order for a consumer
      description: Create an order for a consumer
      operationId: createConsumerOrder
      tags:
        - consumers
      parameters:
        - name: consumerId
          in: path
          description: Consumer ID
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Order object that needs to be added
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /consumers/{consumerId}/orders/{orderId}:
    get:
      summary: Get an order of a consumer
      description: Get an order of a consumer
      operationId: getConsumerOrder
      tags:
        - consumers
      parameters:
        - name: consumerId
          in: path
          description: Consumer ID
          required: true
          schema:
            type: integer
            format: int64
        - name: orderId
          in: path
          description: Order ID
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Update an order of a consumer
      description: Update an order of a consumer
      operationId: updateConsumerOrder
      tags:
        - consumers
      parameters:
        - name: consumerId
          in: path
          description: Consumer ID
          required: true
          schema:
            type: integer
            format: int64
        - name: orderId
          in: path
          description: Order ID
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Order object that needs to be updated
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete an order of a consumer
      description: Delete an order of a consumer
      operationId: deleteConsumerOrder
      tags:
        - consumers
      parameters:
        - name: consumerId
          in: path
          description: Consumer ID
          required: true
          schema:
            type: integer
            format: int64
        - name: orderId
          in: path
          description: Order ID
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: No Content
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /categories:
    get:
      summary: Get all categories
      description: Get all categories
      operationId: getCategories
      tags:
        - categories
      parameters:
        - name: page
          in: query
          description: Page number
          required: false
          schema:
            type: integer
            format: int64
        - name: limit
          in: query
          description: Number of items per page
          required: false
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Category'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Create a category
      description: Create a category
      operationId: createCategory
      tags:
        - categories
      requestBody:
        description: Category object that needs to be created
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Category'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /categories/{categoryId}:
    get:
      summary: Get a category
      description: Get a category
      operationId: getCategory
      tags:
        - categories
      parameters:
        - name: categoryId
          in: path
          description: Category ID
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Update a category
      description: Update a category
      operationId: updateCategory
      tags:
        - categories
      parameters:
        - name: categoryId
          in: path
          description: Category ID
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Category object that needs to be updated
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Category'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete a category
      description: Delete a category
      operationId: deleteCategory
      tags:
        - categories
      parameters:
        - name: categoryId
          in: path
          description: Category ID
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: No Content
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /categories/{categoryId}/products:
    # TODO this or /products?categoryId={categoryId} ?
    get:
      summary: Get products by category
      description: Get products by category
      operationId: getProductsByCategory
      tags:
        - categories
      parameters:
        - name: categoryId
          in: path
          description: Category ID
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /categories/{categoryId}/fields:
    get:
      summary: Get fields of a category
      description: Get fields of a category
      operationId: getFieldsOfCategory
      tags:
        - categories
      parameters:
        - name: categoryId
          in: path
          description: Category ID
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Field'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /categories/{categoryId}/fields/{fieldId}:
    get:
      summary: Get a field of a category
      description: Get a field of a category
      operationId: getFieldOfCategory
      tags:
        - categories
      parameters:
        - name: categoryId
          in: path
          description: Category ID
          required: true
          schema:
            type: integer
            format: int64
        - name: fieldId
          in: path
          description: Field ID
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Field'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Add a field to a category
      description: Add a field to a category
      operationId: addFieldToCategory
      tags:
        - categories
      parameters:
        - name: categoryId
          in: path
          description: Category ID
          required: true
          schema:
            type: integer
            format: int64
        - name: fieldId
          in: path
          description: Field ID
          required: true
          schema:
            type: integer
            format: int64
      # TODO body?
      responses:
        '201':
          description: The field was added to the category
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Field'
        '204':
          description: The field was already on the category
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /fields:
    get:
      summary: Get all fields
      description: Get all fields
      operationId: getFields
      tags:
        - fields
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Field'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Create a field
      description: Create a field
      operationId: createField
      tags:
        - fields
      requestBody:
        description: Field to create
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Field'
      responses:
        '201':
          description: The field was created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Field'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /fields/{fieldId}:
    get:
      summary: Get a field
      description: Get a field
      operationId: getField
      tags:
        - fields
      parameters:
        - name: fieldId
          in: path
          description: Field ID
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Field'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Update a field
      description: Update a field
      operationId: updateField
      tags:
        - fields
      parameters:
        - name: fieldId
          in: path
          description: Field ID
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Field to update
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Field'
      responses:
        '200':
          description: The field was updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Field'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete a field
      description: Delete a field
      operationId: deleteField
      tags:
        - fields
      parameters:
        - name: fieldId
          in: path
          description: Field ID
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: The field was deleted
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /producers:
    get:
      summary: Get all producers
      description: Get all producers
      operationId: getProducers
      tags:
        - producers
      parameters:
        - name: page
          in: query
          description: Page number
          required: false
          schema:
            type: integer
            format: int64
        - name: limit
          in: query
          description: Number of items per page
          required: false
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Producer'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Create a producer
      description: Create a producer
      operationId: createProducer
      tags:
        - producers
      requestBody:
        description: Producer object that needs to be created
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Producer'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Producer'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /producers/{producerId}:
    get:
      summary: Get a producer
      description: Get a producer
      operationId: getProducer
      tags:
        - producers
      parameters:
        - name: producerId
          in: path
          description: Producer ID
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Producer'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Update a producer
      description: Update a producer
      operationId: updateProducer
      tags:
        - producers
      parameters:
        - name: producerId
          in: path
          description: Producer ID
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Producer object that needs to be updated
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Producer'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Producer'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete a producer
      description: Delete a producer
      operationId: deleteProducer
      tags:
        - producers
      parameters:
        - name: producerId
          in: path
          description: Producer ID
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: No Content
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /producers/{producerId}/products:
    get:
      summary: Get all products of a producer
      description: Get all products of a producer
      operationId: getProductsByProducer
      tags:
        - producers
      parameters:
        - name: producerId
          in: path
          description: Producer ID
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /producers/{producerId}/products/{productId}:
    get:
      summary: Get a product of a producer
      description: Get a product of a producer
      operationId: getProductByProducer
      tags:
        - producers
      parameters:
        - name: producerId
          in: path
          description: Producer ID
          required: true
          schema:
            type: integer
            format: int64
        - name: productId
          in: path
          description: Product ID
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Update a product of a producer
      description: Update a product of a producer
      operationId: updateProductByProducer
      tags:
        - producers
      parameters:
        - name: producerId
          in: path
          description: Producer ID
          required: true
          schema:
            type: integer
            format: int64
        - name: productId
          in: path
          description: Product ID
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Product object that needs to be updated
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete a product of a producer
      description: Delete a product of a producer
      operationId: deleteProductByProducer
      tags:
        - producers
      parameters:
        - name: producerId
          in: path
          description: Producer ID
          required: true
          schema:
            type: integer
            format: int64
        - name: productId
          in: path
          description: Product ID
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: No Content
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /producers/{producerId}/units/{unitId}/products:
    get:
      summary: Get all products of a unit
      description: Get all products of a unit
      operationId: getProductsByUnit
      tags:
        - producers
      parameters:
        - name: producerId
          in: path
          description: Producer ID
          required: true
          schema:
            type: integer
            format: int64
        - name: unitId
          in: path
          description: Unit ID
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /producers/{producerId}/units:
    get:
      summary: Get all units of a producer
      description: Get all units of a producer
      operationId: getUnitsByProducer
      tags:
        - producers
      parameters:
        - name: producerId
          in: path
          description: Producer ID
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProductionUnit'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Add a new unit to a producer
      description: Add a new unit to a producer
      operationId: addUnitByProducer
      tags:
        - producers
      parameters:
        - name: producerId
          in: path
          description: Producer ID
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Unit object that needs to be added
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductionUnit'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductionUnit'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /producers/{producerId}/units/{unitId}:
    get:
      summary: Get a unit of a producer
      description: Get a unit of a producer
      operationId: getUnitByProducer
      tags:
        - producers
      parameters:
        - name: producerId
          in: path
          description: Producer ID
          required: true
          schema:
            type: integer
            format: int64
        - name: unitId
          in: path
          description: Unit ID
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductionUnit'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Update a unit of a producer
      description: Update a unit of a producer
      operationId: updateUnitByProducer
      tags:
        - producers
      parameters:
        - name: producerId
          in: path
          description: Producer ID
          required: true
          schema:
            type: integer
            format: int64
        - name: unitId
          in: path
          description: Unit ID
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Unit object that needs to be updated
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductionUnit'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductionUnit'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete a unit of a producer
      description: Delete a unit of a producer
      operationId: deleteUnitByProducer
      tags:
        - producers
      parameters:
        - name: producerId
          in: path
          description: Producer ID
          required: true
          schema:
            type: integer
            format: int64
        - name: unitId
          in: path
          description: Unit ID
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: No Content
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /producers/{producerId}/units/{unitId}/carriers:
    get:
      summary: Get all carriers of a unit
      description: Get all carriers of a unit
      operationId: getCarriersByUnit
      tags:
        - producers
      parameters:
        - name: producerId
          in: path
          description: Producer ID
          required: true
          schema:
            type: integer
            format: int64
        - name: unitId
          in: path
          description: Unit ID
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Carrier'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Create a carrier for a unit
      description: Create a carrier for a unit
      operationId: createCarrierForUnit
      tags:
        - producers
      parameters:
        - name: producerId
          in: path
          description: Producer ID
          required: true
          schema:
            type: integer
            format: int64
        - name: unitId
          in: path
          description: Unit ID
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Carrier'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /producers/{producerId}/units/{unitId}/carriers/{carrierId}:  
    get:
      summary: Get a carrier of a unit
      description: Get a carrier of a unit
      operationId: getCarrierByUnit
      tags:
        - producers
      parameters:
        - name: producerId
          in: path
          description: Producer ID
          required: true
          schema:
            type: integer
            format: int64
        - name: unitId
          in: path
          description: Unit ID
          required: true
          schema:
            type: integer
            format: int64
        - name: carrierId
          in: path
          description: Carrier ID
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Carrier'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Update a carrier
      description: Update a carrier
      operationId: updateCarrier
      tags:
        - producers
      parameters:
        - name: producerId
          in: path
          description: Producer ID
          required: true
          schema:
            type: integer
            format: int64
        - name: unitId
          in: path
          description: Unit ID
          required: true
          schema:
            type: integer
            format: int64
        - name: carrierId
          in: path
          description: Carrier ID
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Carrier'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete a carrier
      description: Delete a carrier
      operationId: deleteCarrier
      tags:
        - producers
      parameters:
        - name: producerId
          in: path
          description: Producer ID
          required: true
          schema:
            type: integer
            format: int64
        - name: unitId
          in: path
          description: Unit ID
          required: true
          schema:
            type: integer
            format: int64
        - name: carrierId
          in: path
          description: Carrier ID
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: No Content
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /producers/{producerId}/units/{unitId}/carriers/{carrierId}/shipments:
    get:
      summary: Get all shipments for a carrier
      description: Get all shipments for a carrier
      operationId: getShipmentsByCarrier
      tags:
        - producers
      parameters:
        - name: producerId
          in: path
          description: Producer ID
          required: true
          schema:
            type: integer
            format: int64
        - name: unitId
          in: path
          description: Unit ID
          required: true
          schema:
            type: integer
            format: int64
        - name: carrierId
          in: path
          description: Carrier ID
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Shipment'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Create a shipment for a carrier
      description: Create a shipment for a carrier
      operationId: createShipmentForCarrier
      tags:
        - producers
      parameters:
        - name: producerId
          in: path
          description: Producer ID
          required: true
          schema:
            type: integer
            format: int64
        - name: unitId
          in: path
          description: Unit ID
          required: true
          schema:
            type: integer
            format: int64
        - name: carrierId
          in: path
          description: Carrier ID
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Shipment'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error' 
  /producers/{producerId}/units/{unitId}/carriers/{carrierId}/shipments/{shipmentId}:
    get:
      summary: Get a shipment of a carrier
      description: Get a shipment of a carrier
      operationId: getShipmentOfCarrier
      tags:
        - producers
      parameters:
        - name: producerId
          in: path
          description: Producer ID
          required: true
          schema:
            type: integer
            format: int64
        - name: unitId
          in: path
          description: Unit ID
          required: true
          schema:
            type: integer
            format: int64
        - name: carrierId
          in: path
          description: Carrier ID
          required: true
          schema:
            type: integer
            format: int64
        - name: shipmentId
          in: path
          description: Shipment ID
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Shipment'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Update a shipment of a carrier
      description: Update a shipment of a carrier
      operationId: updateShipmentOfCarrier
      tags:
        - producers
      parameters:
        - name: producerId
          in: path
          description: Producer ID
          required: true
          schema:
            type: integer
            format: int64
        - name: unitId
          in: path
          description: Unit ID
          required: true
          schema:
            type: integer
            format: int64
        - name: carrierId
          in: path
          description: Carrier ID
          required: true
          schema:
            type: integer
            format: int64
        - name: shipmentId
          in: path
          description: Shipment ID
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '201':
          description: The updated shipment
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Shipment'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete a shipment of a carrier
      description: Delete a shipment of a carrier
      operationId: deleteShipmentOfCarrier
      tags:
        - producers
      parameters:
        - name: producerId
          in: path
          description: Producer ID
          required: true
          schema:
            type: integer
            format: int64
        - name: unitId
          in: path
          description: Unit ID
          required: true
          schema:
            type: integer
            format: int64
        - name: carrierId
          in: path
          description: Carrier ID
          required: true
          schema:
            type: integer
            format: int64
        - name: shipmentId
          in: path
          description: Shipment ID
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: No Content
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /producers/{producerId}/units/{unitId}/carriers/{carrierId}/shipments/{shipmentId}/events:
    get:
      summary: Get all events of a shipment of a carrier
      description: Get all events of a shipment of a carrier
      operationId: getEventsOfShipmentOfCarrier
      tags:
        - producers
      parameters:
        - name: producerId
          in: path
          description: Producer ID
          required: true
          schema:
            type: integer
            format: int64
        - name: unitId
          in: path
          description: Unit ID
          required: true
          schema:
            type: integer
            format: int64
        - name: carrierId
          in: path
          description: Carrier ID
          required: true
          schema:
            type: integer
            format: int64
        - name: shipmentId
          in: path
          description: Shipment ID
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ShipmentEvent'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Create a new event for a shipment of a carrier
      description: Create a new event for a shipment of a carrier
      operationId: createEventForShipmentOfCarrier
      tags:
        - producers
      parameters:
        - name: producerId
          in: path
          description: Producer ID
          required: true
          schema:
            type: integer
            format: int64
        - name: unitId
          in: path
          description: Unit ID
          required: true
          schema:
            type: integer
            format: int64
        - name: carrierId
          in: path
          description: Carrier ID
          required: true
          schema:
            type: integer
            format: int64
        - name: shipmentId
          in: path
          description: Shipment ID
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '201':
          description: The created event
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShipmentEvent'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /producers/{producerId}/units/{unitId}/products/{productId}:
    get:
      summary: Get a product of a unit
      description: Get a product of a unit
      operationId: getProductByUnit
      tags:
        - producers
      parameters:
        - name: producerId
          in: path
          description: Producer ID
          required: true
          schema:
            type: integer
            format: int64
        - name: unitId
          in: path
          description: Unit ID
          required: true
          schema:
            type: integer
            format: int64
        - name: productId
          in: path
          description: Product ID
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Add a product to a unit
      description: Add a product to a unit
      operationId: addProductToUnit
      tags:
        - producers
      parameters:
        - name: producerId
          in: path
          description: Producer ID
          required: true
          schema:
            type: integer
            format: int64
        - name: unitId
          in: path
          description: Unit ID
          required: true
          schema:
            type: integer
            format: int64
        - name: productId
          in: path
          description: Product ID
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '201':
          description: The product was added to the unit
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '204':
          description: The product was already on the unit
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
components:
  schemas:
    Error:
      type: object
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
    Address:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 9
        street:
          type: string
          example: Rua da Liberdade
        number:
          type: string
          example: 51
        zip:
          type: string
          example: 2520-125
        parish:
          type: string
          example: Ferrel
        county:
          type: string
          example: Peniche
        city:
          type: string
          example: Peniche
        district:
          type: string
          example: Leiria
        country:
          type: string
          example: Portugal
        latitude:
          type: number
          format: float
          example: 39.363598
        longitude:
          type: number
          format: float
          example: -9.323305
        createdAt:
          type: string
          format: date-time
          example: 2019-10-10T10:10:10.000Z
        updatedAt:
          type: string
          format: date-time
          example: 2019-10-10T10:10:10.000Z
    User: 
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 8
        name:
          type: string
          example: Cl√°udia
        email:
          type: string
          example: claudia@sapo.pt
        vat:
          type: string
          example: 234567890
        level:
          type: integer
          example: 0
        createdAt:
          type: string
          format: date-time
          example: 2019-10-10T10:10:10.000Z
        updatedAt:
          type: string
          format: date-time
          example: 2019-10-10T10:10:10.000Z
        addresses?:
          type: array
          items:
            type: object
            $ref: '#/components/schemas/UserAddress'
        orders?:
          type: array
          items:
            type: object
            $ref: '#/components/schemas/Order'
    UserAddress:
      type: object
      properties:
        userId: 
          type: integer
          format: int64
          example: 8
        addressId: 
          type: integer
          format: int64
          example: 9
        address?:
          type: object
          $ref: '#/components/schemas/Address'
    Order:
      type: object
      properties:
        consumerId: 
          type: integer 
          format: int64
          example: 8
        id: 
          type: integer
          format: int64
          example: 9
        totalPaid:
          type: number
          format: float
          example: 10.99
        createdAt:
          type: string
          format: date-time
          example: 2019-10-10T10:10:10.000Z
        updatedAt:
          type: string
          format: date-time
          example: 2019-10-10T10:10:10.000Z
        consumer?:
          type: object
          $ref: '#/components/schemas/User'
        orderItems?:
          type: array
          items:
            type: object
            $ref: '#/components/schemas/OrderItem'
    OrderItem:
      type: object
      properties:
        orderId: 
          type: integer
          format: int64
          example: 9
        productId: 
          type: integer
          format: int64
          example: 1
        quantity: 
          type: integer
          example: 1
        order?:
          type: object
          $ref: '#/components/schemas/Order'
        product?:
          type: object
          $ref: '#/components/schemas/Product'
    Product:
      type: object
      properties:
        id: 
          type: integer
          format: int64
          example: 1
        producerId: 
          type: integer
          format: int64
          example: 2
        productSpecificationId: 
          type: integer
          format: int64
          example: 3
        price:
          type: number
          format: float
          example: 10.99
        productionDate:
          type: string
          format: date-time
          example: 2019-10-10T10:10:10.000Z
        createdAt:
          type: string
          format: date-time
          example: 2019-10-10T10:10:10.000Z
        updatedAt:
          type: string
          format: date-time
          example: 2019-10-10T10:10:10.000Z
        producer?:
          type: object
          $ref: '#/components/schemas/User'
        productSpecification?:
          type: object
          $ref: '#/components/schemas/ProductSpecification'
    ProductSpecification:
      type: object
      properties:
        id: 
          type: integer
          format: int64
          example: 3
        name: 
          type: string
          example: Ma√ß√£
        description: 
          type: string
          example: Ma√ß√£s vermelhas
        basePrice:
          type: number
          format: float
          example: 10.99
        # TODO unit?
        # unit:
        #   type: string
        #   example: Kg
        createdAt:
          type: string
          format: date-time
          example: 2019-10-10T10:10:10.000Z
        updatedAt:
          type: string
          format: date-time
          example: 2019-10-10T10:10:10.000Z
    ProductSpecificationCategory:
      type: object
      properties:
        productSpecificationId: 
          type: integer
          format: int64
          example: 3
        categoryId: 
          type: integer
          format: int64
          example: 1
        productSpecification?:
          type: object
          $ref: '#/components/schemas/ProductSpecification'
        category?:
          type: object
          $ref: '#/components/schemas/Category'
    ProductSpecificationCategoryValue:
      type: object
      properties:
        productSpecificationId: 
          type: integer
          format: int64
          example: 3
        fieldId: 
          type: integer
          format: int64
          example: 1
        value:
          type: string
          example: Vermelho
        productSpecification?:
          type: object
          $ref: '#/components/schemas/ProductSpecification'
        field?:
          type: object
          $ref: '#/components/schemas/Field'
    Category:
      type: object
      properties:
        id: 
          type: integer
          format: int64
          example: 1
        name: 
          type: string
          example: Fruta
        parentCategoryId: 
          type: integer
          format: int64
          example: 2
        createdAt:
          type: string
          format: date-time
          example: 2019-10-10T10:10:10.000Z
        updatedAt:
          type: string
          format: date-time
          example: 2019-10-10T10:10:10.000Z
        parentCategory?:
          type: object
          $ref: '#/components/schemas/Category'
    FieldType:
      type: string
      enum:
        - text
        - number
        - date
        - boolean
        - enum
    Field:
      type: object
      properties:
        id: 
          type: integer
          format: int64
          example: 1
        name: 
          type: string
          example: Cor
        type: 
          $ref: '#/components/schemas/FieldType'
        createdAt:
          type: string
          format: date-time
          example: 2019-10-10T10:10:10.000Z
        updatedAt:
          type: string
          format: date-time
          example: 2019-10-10T10:10:10.000Z
    CategoryField:
      type: object
      properties:
        categoryId: 
          type: integer
          format: int64
          example: 1
        fieldId: 
          type: integer
          format: int64
          example: 2
        category?:
          type: object
          $ref: '#/components/schemas/Category'
        field?:
          type: object
          $ref: '#/components/schemas/Field'
    FieldPossibleValue:
      type: object
      properties:
        fieldId: 
          type: integer
          format: int64
          example: 1
        value: 
          type: string
          example: Vermelho
        field?:
          type: object
          $ref: '#/components/schemas/Field'
        # TODO deleted at?
