// Render this on https://dbdiagram.io

// TODO MAJOR
// - Notifications

// Users
Table User {
    id int [pk, increment]
    name varchar
    email varchar
    phone int
    vat varchar
    type UserType
    createdAt datetime
    updatedAt datetime
    deletedAt datetime
}

Enum UserType {
    "consumer"
    "supplier"
    "admin"
}

// Join table
Table UserAddress {
    userId int [not null, ref: > User.id]
    addressId int [not null, ref: > Address.id]

    Indexes {
        (userId, addressId) [unique]
    }
}

Table Address {
    id int [pk, increment]
    street varchar
    number varchar
    zip varchar
    parish varchar 
    county varchar
    city varchar
    district varchar
    country varchar
    latitude float
    longitude float
    createdAt datetime
    updatedAt datetime
    deletedAt datetime
}

// Product
Table ProductSpecification {
    id int [pk, increment]
    name varchar
    description varchar
    basePrice float
    createdAt datetime
    updatedAt datetime
    deletedAt datetime
}

// Join table
Table ProductSpecificationCategory {
    productSpecificationId int [not null, ref: > ProductSpecification.id]
    categoryId int [not null, ref: > Category.id]

    Indexes {
        (productSpecificationId, categoryId) [unique]
    }
}

Table Category {
    id int [pk, increment]
    name varchar
    parentCategoryId int [ref: > Category.id]
    createdAt datetime
    updatedAt datetime
    deletedAt datetime
}

// Join table
Table CategoryField {
    categoryId int [not null, ref: > Category.id]
    fieldId int [not null, ref: > Field.id]

    Indexes {
        (categoryId, fieldId) [unique]
    }
}

Table Field {
    id int [pk, increment]
    name varchar
    type FieldType
    createdAt datetime
    updatedAt datetime
    deletedAt datetime
}

Enum FieldType {
    "text"
    "number"
    "date"
    "boolean"
    "enum" // If enum, then the field has a list of possible values, from FieldPossibleValue 
}

Table FieldPossibleValue {
    fieldId int [not null, ref: > Field.id]
    value varchar

    Indexes {
        (fieldId, value) [unique]
    }
}

// The actual ProductSpecification Category Field Value
Table ProductSpecificationCategoryValue {
    productSpecificationIdId int [not null, ref: > ProductSpecificationCategory.productSpecificationId]
    fieldId int [not null, ref: > Field.id]
    value varbinary // This is parsed on the backend, depending on the field type

    Indexes {
        (productSpecificationIdId, fieldId) [unique]
    }
}

// TODO Product Discounts?

// A concrete Product from a Supplier
Table Product {
    id int [pk, increment]
    producerId int [not null, ref: > User.id]
    productSpecificationId int [not null, ref: > ProductSpecification.id]
    price float
    productionDate datetime
    createdAt datetime
    updatedAt datetime
    deletedAt datetime
}

// Orders
Table Order {
    id int [pk, increment]
    consumerId int [pk, ref: > User.id]
    totalPaid float [null]
    couponId int [ref: > Coupon.id]
    createdAt datetime
    updatedAt datetime
    deletedAt datetime
}

Table OrderItem {
    orderId int [not null, ref: > Order.id]
    productId int [not null, ref: > Product.id]
    quantity int

    Indexes {
        (orderId, productId) [unique]
    }
}

// TODO define rules
// - per customer
// - per supplier
// - per product
// 
// TODO suppliers create coupons?
// -> if so they can only be used in their products

Table Coupon {
    id int [pk, increment]
    code varchar
    discount float
    createdAt datetime
    updatedAt datetime
    deletedAt datetime
}